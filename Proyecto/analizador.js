/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,19],$V2=[1,18],$V3=[1,23],$V4=[1,24],$V5=[1,25],$V6=[1,26],$V7=[1,27],$V8=[1,20],$V9=[1,17],$Va=[1,21],$Vb=[1,22],$Vc=[2,5,19,21,35,36,37,38,39,40,73,107,108],$Vd=[1,33],$Ve=[1,34],$Vf=[2,36],$Vg=[21,49,51,65],$Vh=[1,39],$Vi=[1,44],$Vj=[1,40],$Vk=[1,43],$Vl=[1,57],$Vm=[1,48],$Vn=[1,47],$Vo=[1,49],$Vp=[1,50],$Vq=[1,51],$Vr=[1,52],$Vs=[1,53],$Vt=[1,54],$Vu=[1,55],$Vv=[1,56],$Vw=[1,58],$Vx=[1,59],$Vy=[1,60],$Vz=[1,61],$VA=[1,62],$VB=[1,63],$VC=[1,67],$VD=[2,5,19,21,22,35,36,37,38,39,40,42,55,58,59,60,61,62,63,64,67,68,69,70,71,72,73,76,89,90,91,92,93,97,101,102,103,104,105,107,108],$VE=[10,23],$VF=[1,96],$VG=[1,97],$VH=[1,82],$VI=[1,83],$VJ=[1,84],$VK=[1,85],$VL=[1,86],$VM=[1,87],$VN=[1,88],$VO=[1,89],$VP=[1,90],$VQ=[1,91],$VR=[1,92],$VS=[1,93],$VT=[1,94],$VU=[1,95],$VV=[1,98],$VW=[2,10,21,23,26,30,32,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,57,66,76,89,90,91,92,93,97,101,102,103,104,105,107,108],$VX=[1,121],$VY=[23,26],$VZ=[10,26,28],$V_=[2,10,21,23,26,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,57,66,76,89,90,91,92,93,97,101,102,103,104,105,107,108],$V$=[2,10,21,23,26,35,36,37,38,39,40,53,54,56,57,66,76,89,90,91,92,93,97,101,102,103,104,105,107,108],$V01=[1,182],$V11=[1,188],$V21=[1,187],$V31=[1,184],$V41=[1,185],$V51=[1,186],$V61=[1,189],$V71=[1,191],$V81=[1,190],$V91=[1,192],$Va1=[1,193],$Vb1=[2,10,21,23,26,35,36,37,38,39,40,41,42,47,48,49,50,51,52,53,54,56,57,66,76,89,90,91,92,93,97,101,102,103,104,105,107,108],$Vc1=[2,10,21,23,26,35,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,56,57,66,76,89,90,91,92,93,97,101,102,103,104,105,107,108],$Vd1=[2,10,21,23,26,35,36,37,38,39,40,47,48,49,50,51,52,53,54,56,57,66,76,89,90,91,92,93,97,101,102,103,104,105,107,108],$Ve1=[1,214],$Vf1=[23,26,76],$Vg1=[2,21,35,36,37,38,39,40,76,89,90,91,92,93,97,101,102,103,104,105,107,108],$Vh1=[1,229],$Vi1=[1,230],$Vj1=[2,5,19,21,35,36,37,38,39,40,73,76,89,90,91,92,93,97,101,102,103,104,105,107,108],$Vk1=[1,302],$Vl1=[1,310],$Vm1=[1,309],$Vn1=[76,101,102],$Vo1=[1,351],$Vp1=[2,21,35,36,37,38,39,40,76,89,90,91,92,93,94,97,101,102,103,104,105,107,108];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"OPCIONESCUERPO":4,"EOF":5,"CUERPO":6,"DEC_VAR":7,"DEC_MET":8,"AS_VAR":9,"ptcoma":10,"EXEC":11,"DEC_FUN":12,"DEC_VEC":13,"AS_VEC":14,"DEC_LISTA":15,"ADD_LISTA":16,"UPD_LISTA":17,"CHARARRAY":18,"start":19,"with":20,"identificador":21,"parA":22,"parC":23,"LISTAVALORES":24,"LLAMADA_METODO":25,"coma":26,"EXPRESION":27,"igual":28,"INC_VAR":29,"incremento":30,"DECR_VAR":31,"decremento":32,"TIPO":33,"LISTADEC":34,"decimal":35,"cadena":36,"bandera":37,"intpr":38,"charpr":39,"dynamiclist":40,"suma":41,"menos":42,"multi":43,"div":44,"exponente":45,"modulo":46,"igualigual":47,"diferente":48,"menor":49,"menorigual":50,"mayor":51,"mayorigual":52,"or":53,"and":54,"not":55,"interrogacion":56,"dospuntos":57,"toupper":58,"tolower":59,"length":60,"truncate":61,"round":62,"typeof":63,"tostring":64,"corA":65,"corC":66,"getvalue":67,"NUMBER":68,"true":69,"false":70,"string":71,"caracter":72,"void":73,"llaveA":74,"OPCIONESMETODO":75,"llaveC":76,"LISTAPARAMETROS":77,"PARAMETROS":78,"CUERPOMETODO":79,"WHILE":80,"FOR":81,"DOWHILE":82,"IMPRIMIR":83,"IF":84,"BREAK":85,"SWITCH":86,"CONTINUE":87,"RETURN":88,"writeline":89,"while":90,"for":91,"do":92,"if":93,"else":94,"ELSEIF":95,"CONEIF":96,"switch":97,"CUERPOSWITCH":98,"DEFAULT":99,"CONSWITCH":100,"case":101,"default":102,"break":103,"continue":104,"return":105,"nuevo":106,"append":107,"setvalue":108,"tochararray":109,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"ptcoma",19:"start",20:"with",21:"identificador",22:"parA",23:"parC",26:"coma",28:"igual",30:"incremento",32:"decremento",35:"decimal",36:"cadena",37:"bandera",38:"intpr",39:"charpr",40:"dynamiclist",41:"suma",42:"menos",43:"multi",44:"div",45:"exponente",46:"modulo",47:"igualigual",48:"diferente",49:"menor",50:"menorigual",51:"mayor",52:"mayorigual",53:"or",54:"and",55:"not",56:"interrogacion",57:"dospuntos",58:"toupper",59:"tolower",60:"length",61:"truncate",62:"round",63:"typeof",64:"tostring",65:"corA",66:"corC",67:"getvalue",68:"NUMBER",69:"true",70:"false",71:"string",72:"caracter",73:"void",74:"llaveA",76:"llaveC",89:"writeline",90:"while",91:"for",92:"do",93:"if",94:"else",97:"switch",101:"case",102:"default",103:"break",104:"continue",105:"return",106:"nuevo",107:"append",108:"setvalue",109:"tochararray"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[11,6],[11,7],[25,4],[25,5],[24,3],[24,1],[9,3],[29,2],[31,2],[7,3],[7,5],[7,4],[7,6],[34,3],[34,2],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[27,2],[27,2],[27,5],[27,4],[27,4],[27,4],[27,4],[27,4],[27,4],[27,4],[27,4],[27,6],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[8,7],[8,8],[12,7],[12,8],[77,3],[77,1],[78,2],[78,5],[75,2],[75,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,2],[79,1],[79,1],[79,1],[79,2],[79,2],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[83,5],[80,7],[81,10],[81,10],[81,11],[81,11],[81,10],[81,11],[82,9],[84,7],[84,11],[84,8],[84,12],[95,2],[95,1],[96,8],[86,8],[86,7],[86,7],[98,2],[98,1],[100,4],[99,3],[85,2],[87,2],[88,2],[88,2],[13,11],[13,9],[14,7],[15,12],[16,7],[17,9],[18,11]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 80: case 116: case 122:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 30: case 77: case 81: case 117: case 123:
this.$=[$$[$0]];
break;
case 4: case 5: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 82: case 83: case 84: case 85: case 86: case 88: case 89: case 90: case 93: case 94: case 95: case 96: case 97: case 98: case 99: case 100: case 101:
this.$=$$[$0]
break;
case 6: case 44: case 87: case 91: case 92:
this.$=$$[$0-1]
break;
case 15:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
      ErroresS =  new Array();
ErroresS.push("Sintactico");
ErroresS.push(yytext);
ErroresS.push(this._$.first_line);
ErroresS.push(this._$.first_column);
TablaErrores.push(ErroresS);
      
break;
case 16:
this.$ = INSTRUCCION.nuevoExec($$[$0-3], null, this._$.first_line,this._$.first_column+1)
break;
case 17:
this.$ = INSTRUCCION.nuevoExec($$[$0-4], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 18:
this.$ = INSTRUCCION.nuevaLlamada($$[$0-3], null, this._$.first_line,this._$.first_column+1)
break;
case 19:
this.$ = INSTRUCCION.nuevaLlamada($$[$0-4], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 20:
$$[$0-2].push($$[$0]); this.$=$$[$0-2]
break;
case 21:
this.$=[$$[$0]]
break;
case 22:
this.$ = INSTRUCCION.nuevaAsignacion($$[$0-2], $$[$0], this._$.first_line,this._$.first_column+1)
break;
case 23:
this.$= INSTRUCCION.nuevoIncremento($$[$0-1],this._$.first_line,this._$.first_column+1);
break;
case 24:
this.$= INSTRUCCION.nuevoDecremento($$[$0-1],this._$.first_line,this._$.first_column+1);
break;
case 25:
this.$ = INSTRUCCION.nuevaDeclaracion($$[$0-1], null, $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 26:
this.$ = INSTRUCCION.nuevaDeclaracion($$[$0-3], $$[$0-1], $$[$0-4], this._$.first_line,this._$.first_column+1)
break;
case 27:
var temp=$$[$0-2]; for(var i=0;i<$$[$0-1].length;i++){temp=temp + "," + $$[$0-1][i]}; this.$ = INSTRUCCION.nuevaDeclaracion(temp, null, $$[$0-3], this._$.first_line,this._$.first_column+1)
break;
case 28:
var temp=$$[$0-4]; for(var i=0;i<$$[$0-3].length;i++){temp=temp + "," + $$[$0-3][i]}; this.$ = INSTRUCCION.nuevaDeclaracion(temp, $$[$0-1], $$[$0-5], this._$.first_line,this._$.first_column+1)
break;
case 29: case 76:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 31:
this.$ = TIPO_DATO.DECIMAL
break;
case 32:
this.$ = TIPO_DATO.CADENA
break;
case 33:
this.$ = TIPO_DATO.BANDERA
break;
case 34:
this.$ = TIPO_DATO.ENTERO
break;
case 35:
this.$ = TIPO_DATO.CARACTER
break;
case 36:
this.$ = TIPO_DATO.LISTA
break;
case 37:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.SUMA,this._$.first_line,this._$.first_column+1);
break;
case 38:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.RESTA,this._$.first_line,this._$.first_column+1);
break;
case 39:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MULTIPLICACION,this._$.first_line,this._$.first_column+1);
break;
case 40:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIVISION,this._$.first_line,this._$.first_column+1);
break;
case 41:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.POTENCIA,this._$.first_line,this._$.first_column+1);
break;
case 42:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MODULO,this._$.first_line,this._$.first_column+1);
break;
case 43:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0],$$[$0], TIPO_OPERACION.NEGACION,this._$.first_line,this._$.first_column+1);
break;
case 45:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.IGUALIGUAL,this._$.first_line,this._$.first_column+1);
break;
case 46:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIFERENTE,this._$.first_line,this._$.first_column+1);
break;
case 47:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENOR,this._$.first_line,this._$.first_column+1);
break;
case 48:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENORIGUAL,this._$.first_line,this._$.first_column+1);
break;
case 49:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYOR,this._$.first_line,this._$.first_column+1);
break;
case 50:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYORIGUAL,this._$.first_line,this._$.first_column+1);
break;
case 51:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.OR,this._$.first_line,this._$.first_column+1);
break;
case 52:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.AND,this._$.first_line,this._$.first_column+1);
break;
case 53:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0],$$[$0], TIPO_OPERACION.NOT,this._$.first_line,this._$.first_column+1);
break;
case 54:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.INC,this._$.first_line,this._$.first_column+1);
break;
case 55:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.DEC,this._$.first_line,this._$.first_column+1);
break;
case 56:
this.$= INSTRUCCION.nuevaOperacionTernaria($$[$0-4],$$[$0-2],$$[$0], TIPO_OPERACION.TERNARIO,this._$.first_line,this._$.first_column+1);
break;
case 57:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.TOUPPER,this._$.first_line,this._$.first_column+1);
break;
case 58:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.TOLOWER,this._$.first_line,this._$.first_column+1);
break;
case 59:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.LENGTH,this._$.first_line,this._$.first_column+1);
break;
case 60:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.TRUNCATE,this._$.first_line,this._$.first_column+1);
break;
case 61:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.ROUND,this._$.first_line,this._$.first_column+1);
break;
case 62:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.TYPEOF,this._$.first_line,this._$.first_column+1);
break;
case 63:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.TOSTRING,this._$.first_line,this._$.first_column+1);
break;
case 64:
this.$ = INSTRUCCION.nuevoValorVector($$[$0-3],$$[$0-1], TIPO_VALOR.VECTOR, this._$.first_line,this._$.first_column+1)
break;
case 65:
this.$ = INSTRUCCION.nuevoValorLista($$[$0-3],$$[$0-1], TIPO_VALOR.LISTA, this._$.first_line,this._$.first_column+1)
break;
case 66:

           split1 = String($$[$0]).split(".");
           if(split1.length === 1){
              this.$ = INSTRUCCION.nuevoValor(Number($$[$0]), TIPO_VALOR.ENTERO, this._$.first_line,this._$.first_column+1)
            } else{
              this.$ = INSTRUCCION.nuevoValor(Number($$[$0]), TIPO_VALOR.DECIMAL, this._$.first_line,this._$.first_column+1)
            }
           
break;
case 67:
this.$ = INSTRUCCION.nuevoValor(($$[$0]), TIPO_VALOR.BANDERA, this._$.first_line,this._$.first_column+1)
break;
case 68:
this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.BANDERA, this._$.first_line,this._$.first_column+1)
break;
case 69:
this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.CADENA, this._$.first_line,this._$.first_column+1)
break;
case 70:
this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR, this._$.first_line,this._$.first_column+1)
break;
case 71:
this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.CARACTER, this._$.first_line,this._$.first_column+1)
break;
case 72:
this.$ = INSTRUCCION.nuevoMetodo($$[$0-5], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 73:
this.$ = INSTRUCCION.nuevoMetodo($$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 74:
this.$ = INSTRUCCION.nuevaFuncion($$[$0-6], $$[$0-5], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 75:
this.$ = INSTRUCCION.nuevoMetodo($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 78:
this.$ = INSTRUCCION.nuevaDeclaracion($$[$0], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 79:
this.$ = INSTRUCCION.nuevaDeclaracion($$[$0], null, $$[$0-4], this._$.first_line,this._$.first_column+1)
break;
case 102:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
ErroresS =  new Array();
ErroresS.push("Sintactico");
ErroresS.push(yytext);
ErroresS.push(this._$.first_line);
ErroresS.push(this._$.first_column);
TablaErrores.push(ErroresS);
break;
case 103:
this.$ = new INSTRUCCION.nuevoCout($$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 104:
this.$ = new INSTRUCCION.nuevoWhile($$[$0-4], $$[$0-1] , this._$.first_line,this._$.first_column+1)
break;
case 105: case 106: case 109:
this.$ = new INSTRUCCION.nuevoFor($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 107: case 108: case 110:
this.$ = new INSTRUCCION.nuevoFor($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 111:
this.$ = new INSTRUCCION.nuevoDowhile($$[$0-6], $$[$0-2] , this._$.first_line,this._$.first_column+1)
break;
case 112:
this.$ = new INSTRUCCION.nuevoIf($$[$0-4], $$[$0-1] , this._$.first_line,this._$.first_column+1)
break;
case 113:
this.$ = new INSTRUCCION.nuevoIfElse($$[$0-8], $$[$0-5], $$[$0-1] , this._$.first_line,this._$.first_column+1)
break;
case 114:
this.$= new INSTRUCCION.nuevoIfConElseIf($$[$0-5], $$[$0-2], $$[$0], null, this._$.first_line,this._$.first_column+1)
break;
case 115:
this.$= new INSTRUCCION.nuevoIfConElseIf($$[$0-9], $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 118:
this.$ = new INSTRUCCION.nuevoElseIf($$[$0-4], $$[$0-1] , this._$.first_line,this._$.first_column+1) 
break;
case 119:
this.$= new INSTRUCCION.nuevoSwitch($$[$0-5], $$[$0-2], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 120:
this.$= new INSTRUCCION.nuevoSwitch($$[$0-4], $$[$0-1], null, this._$.first_line,this._$.first_column+1)
break;
case 121:
this.$= new INSTRUCCION.nuevoSwitch($$[$0-4], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 124:
this.$ = new INSTRUCCION.nuevoCase($$[$0-2], $$[$0] , this._$.first_line,this._$.first_column+1) 
break;
case 125:
this.$ = $$[$0]
break;
case 126:
this.$ = new INSTRUCCION.nuevoBreak(this._$.first_line,this._$.first_column+1)
break;
case 127:
this.$ = new INSTRUCCION.nuevoContinue(this._$.first_line,this._$.first_column+1)
break;
case 128:
this.$ = new INSTRUCCION.nuevoReturn(this._$.first_line,this._$.first_column+1)
break;
case 130:
this.$ = INSTRUCCION.nuevaDeclaracionVector($$[$0-10],$$[$0-9],$$[$0-4],$$[$0-2],this._$.first_line,this._$.first_column+1)
break;
case 131:
this.$ = INSTRUCCION.nuevaDeclaracionVector($$[$0-8],$$[$0-7],null,$$[$0-2],this._$.first_line,this._$.first_column+1)
break;
case 132:
this.$ = INSTRUCCION.nuevaAsignacionVector($$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 133:
this.$ = INSTRUCCION.nuevaDeclaracionLista($$[$0-9],$$[$0-7],$$[$0-2],this._$.first_line,this._$.first_column+1)
break;
case 134:
this.$ = INSTRUCCION.nuevaAsignacionLista($$[$0-4], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 135:
this.$ = INSTRUCCION.nuevoUpdateLista($$[$0-6], $$[$0-4], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 136:
this.$ = INSTRUCCION.nuevoCharArray($$[$0-8], $$[$0-6], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,21:$V2,33:16,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,73:$V9,107:$Va,108:$Vb},{1:[3]},{2:$V0,5:[1,28],6:29,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,21:$V2,33:16,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,73:$V9,107:$Va,108:$Vb},o($Vc,[2,3]),o($Vc,[2,4]),o($Vc,[2,5]),{10:[1,30]},o($Vc,[2,7]),o($Vc,[2,8]),o($Vc,[2,9]),o($Vc,[2,10]),o($Vc,[2,11]),o($Vc,[2,12]),o($Vc,[2,13]),o($Vc,[2,14]),o($Vc,[2,15]),{21:[1,31]},{21:[1,32]},{28:$Vd,65:$Ve},{20:[1,35]},{21:$Vf,49:[1,36]},{22:[1,37]},{22:[1,38]},o($Vg,[2,31]),o($Vg,[2,32]),o($Vg,[2,33]),o($Vg,[2,34]),o($Vg,[2,35]),{1:[2,1]},o($Vc,[2,2]),o($Vc,[2,6]),{10:$Vh,22:[1,42],26:$Vi,28:$Vj,34:41,65:$Vk},{22:[1,45]},{21:$Vl,22:$Vm,27:46,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{21:$Vl,22:$Vm,27:64,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{21:[1,65]},{33:66,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$VC},{21:[1,68]},{21:[1,69]},o($VD,[2,25]),{21:$Vl,22:$Vm,27:70,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{10:[1,71],26:[1,73],28:[1,72]},{23:[1,74],33:77,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$VC,77:75,78:76},{66:[1,78]},{21:[1,79]},{23:[1,80],33:77,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$VC,77:81,78:76},o($VE,[2,22],{30:$VF,32:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,56:$VV}),{21:$Vl,22:$Vm,27:99,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{21:$Vl,22:$Vm,27:100,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{21:$Vl,22:$Vm,27:101,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{22:[1,102]},{22:[1,103]},{22:[1,104]},{22:[1,105]},{22:[1,106]},{22:[1,107]},{22:[1,108]},o($VW,[2,70],{65:[1,109]}),{22:[1,110]},o($VW,[2,66]),o($VW,[2,67]),o($VW,[2,68]),o($VW,[2,69]),o($VW,[2,71]),{30:$VF,32:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,56:$VV,66:[1,111]},{22:[1,112]},{51:[1,113]},o($Vg,$Vf),{26:[1,114]},{26:[1,115]},{10:[1,116],30:$VF,32:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,56:$VV},o($VD,[2,27]),{21:$Vl,22:$Vm,27:117,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{21:[1,118]},{74:[1,119]},{23:[1,120],26:$VX},o($VY,[2,77]),{21:[1,122],49:[1,123]},{28:[1,124]},o($VZ,[2,30]),{74:[1,125]},{23:[1,126],26:$VX},{21:$Vl,22:$Vm,27:127,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{21:$Vl,22:$Vm,27:128,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{21:$Vl,22:$Vm,27:129,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{21:$Vl,22:$Vm,27:130,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{21:$Vl,22:$Vm,27:131,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{21:$Vl,22:$Vm,27:132,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{21:$Vl,22:$Vm,27:133,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{21:$Vl,22:$Vm,27:134,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{21:$Vl,22:$Vm,27:135,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{21:$Vl,22:$Vm,27:136,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{21:$Vl,22:$Vm,27:137,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{21:$Vl,22:$Vm,27:138,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{21:$Vl,22:$Vm,27:139,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{21:$Vl,22:$Vm,27:140,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},o($VW,[2,54]),o($VW,[2,55]),{21:$Vl,22:$Vm,27:141,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},o($V_,[2,43],{30:$VF,32:$VG}),{23:[1,142],30:$VF,32:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,56:$VV},o($V$,[2,53],{30:$VF,32:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS}),{21:$Vl,22:$Vm,27:143,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{21:$Vl,22:$Vm,27:144,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{21:$Vl,22:$Vm,27:145,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{21:$Vl,22:$Vm,27:146,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{21:$Vl,22:$Vm,27:147,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{21:$Vl,22:$Vm,27:148,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{21:$Vl,22:$Vm,27:149,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{21:$Vl,22:$Vm,27:150,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{21:[1,151]},{28:[1,152]},{21:$Vl,22:$Vm,23:[1,153],24:154,27:155,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{21:[1,156]},{21:$Vl,22:$Vm,27:157,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{21:$Vl,22:$Vm,27:158,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},o($VD,[2,26]),{10:[1,159],30:$VF,32:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,56:$VV},o($VZ,[2,29]),{2:$V01,7:162,9:167,13:176,14:177,15:178,16:179,17:180,18:181,21:$V11,25:168,29:171,31:172,33:183,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,75:160,79:161,80:163,81:164,82:165,83:166,84:169,85:170,86:173,87:174,88:175,89:$V21,90:$V31,91:$V41,92:$V51,93:$V61,97:$V71,103:$V81,104:$V91,105:$Va1,107:$Va,108:$Vb},{74:[1,194]},{33:77,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$VC,78:195},o($VY,[2,78]),{33:196,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$VC},{74:[1,198],106:[1,197]},{2:$V01,7:162,9:167,13:176,14:177,15:178,16:179,17:180,18:181,21:$V11,25:168,29:171,31:172,33:183,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,75:199,79:161,80:163,81:164,82:165,83:166,84:169,85:170,86:173,87:174,88:175,89:$V21,90:$V31,91:$V41,92:$V51,93:$V61,97:$V71,103:$V81,104:$V91,105:$Va1,107:$Va,108:$Vb},{74:[1,200]},o($Vb1,[2,37],{30:$VF,32:$VG,43:$VJ,44:$VK,45:$VL,46:$VM}),o($Vb1,[2,38],{30:$VF,32:$VG,43:$VJ,44:$VK,45:$VL,46:$VM}),o($Vc1,[2,39],{30:$VF,32:$VG,45:$VL}),o($Vc1,[2,40],{30:$VF,32:$VG,45:$VL}),o($V_,[2,41],{30:$VF,32:$VG}),o($Vc1,[2,42],{30:$VF,32:$VG,45:$VL}),o($Vd1,[2,45],{30:$VF,32:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM}),o($Vd1,[2,46],{30:$VF,32:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM}),o($Vd1,[2,47],{30:$VF,32:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM}),o($Vd1,[2,48],{30:$VF,32:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM}),o($Vd1,[2,49],{30:$VF,32:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM}),o($Vd1,[2,50],{30:$VF,32:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM}),o([2,10,21,23,26,35,36,37,38,39,40,53,56,57,66,76,89,90,91,92,93,97,101,102,103,104,105,107,108],[2,51],{30:$VF,32:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VU}),o($V$,[2,52],{30:$VF,32:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS}),{30:$VF,32:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,56:$VV,57:[1,201]},o($VW,[2,44]),{23:[1,202],30:$VF,32:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,56:$VV},{23:[1,203],30:$VF,32:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,56:$VV},{23:[1,204],30:$VF,32:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,56:$VV},{23:[1,205],30:$VF,32:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,56:$VV},{23:[1,206],30:$VF,32:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,56:$VV},{23:[1,207],30:$VF,32:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,56:$VV},{23:[1,208],30:$VF,32:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,56:$VV},{30:$VF,32:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,56:$VV,66:[1,209]},{26:[1,210]},{21:$Vl,22:$Vm,27:211,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{10:[1,212]},{23:[1,213],26:$Ve1},o($Vf1,[2,21],{30:$VF,32:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,56:$VV}),{28:[1,215]},{23:[1,216],30:$VF,32:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,56:$VV},{26:[1,217],30:$VF,32:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,56:$VV},o($VD,[2,28]),{2:$V01,7:162,9:167,13:176,14:177,15:178,16:179,17:180,18:181,21:$V11,25:168,29:171,31:172,33:183,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,76:[1,218],79:219,80:163,81:164,82:165,83:166,84:169,85:170,86:173,87:174,88:175,89:$V21,90:$V31,91:$V41,92:$V51,93:$V61,97:$V71,103:$V81,104:$V91,105:$Va1,107:$Va,108:$Vb},o($Vg1,[2,81]),o($Vg1,[2,82]),o($Vg1,[2,83]),o($Vg1,[2,84]),o($Vg1,[2,85]),o($Vg1,[2,86]),{10:[1,220]},o($Vg1,[2,88]),o($Vg1,[2,89]),o($Vg1,[2,90]),{10:[1,221]},{10:[1,222]},o($Vg1,[2,93]),o($Vg1,[2,94]),o($Vg1,[2,95]),o($Vg1,[2,96]),o($Vg1,[2,97]),o($Vg1,[2,98]),o($Vg1,[2,99]),o($Vg1,[2,100]),o($Vg1,[2,101]),o($Vg1,[2,102]),{21:[1,223]},{22:[1,224]},{22:[1,225]},{74:[1,226]},{22:[1,227]},{22:[1,228],28:$Vd,30:$Vh1,32:$Vi1,65:$Ve},{22:[1,231]},{10:[1,232]},{22:[1,233]},{10:[1,234]},{10:[1,235],21:$Vl,22:$Vm,27:236,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{2:$V01,7:162,9:167,13:176,14:177,15:178,16:179,17:180,18:181,21:$V11,25:168,29:171,31:172,33:183,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,75:237,79:161,80:163,81:164,82:165,83:166,84:169,85:170,86:173,87:174,88:175,89:$V21,90:$V31,91:$V41,92:$V51,93:$V61,97:$V71,103:$V81,104:$V91,105:$Va1,107:$Va,108:$Vb},o($VY,[2,76]),{51:[1,238]},{33:239,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$VC},{21:$Vl,22:$Vm,24:240,27:155,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{2:$V01,7:162,9:167,13:176,14:177,15:178,16:179,17:180,18:181,21:$V11,25:168,29:171,31:172,33:183,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,76:[1,241],79:219,80:163,81:164,82:165,83:166,84:169,85:170,86:173,87:174,88:175,89:$V21,90:$V31,91:$V41,92:$V51,93:$V61,97:$V71,103:$V81,104:$V91,105:$Va1,107:$Va,108:$Vb},{2:$V01,7:162,9:167,13:176,14:177,15:178,16:179,17:180,18:181,21:$V11,25:168,29:171,31:172,33:183,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,75:242,79:161,80:163,81:164,82:165,83:166,84:169,85:170,86:173,87:174,88:175,89:$V21,90:$V31,91:$V41,92:$V51,93:$V61,97:$V71,103:$V81,104:$V91,105:$Va1,107:$Va,108:$Vb},{21:$Vl,22:$Vm,27:243,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},o($VW,[2,57]),o($VW,[2,58]),o($VW,[2,59]),o($VW,[2,60]),o($VW,[2,61]),o($VW,[2,62]),o($VW,[2,63]),o($VW,[2,64]),{21:$Vl,22:$Vm,27:244,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{10:[1,245],30:$VF,32:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,56:$VV},o($Vc,[2,16]),{10:[1,246]},{21:$Vl,22:$Vm,27:247,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{106:[1,248],109:[1,249]},{10:[1,250]},{21:$Vl,22:$Vm,27:251,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},o($Vc,[2,74]),o($Vg1,[2,80]),o($Vg1,[2,87]),o($Vg1,[2,91]),o($Vg1,[2,92]),{10:$Vh,26:$Vi,28:$Vj,34:41,65:$Vk},{21:$Vl,22:$Vm,27:252,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{7:253,9:254,21:[1,256],33:255,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$VC},{2:$V01,7:162,9:167,13:176,14:177,15:178,16:179,17:180,18:181,21:$V11,25:168,29:171,31:172,33:183,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,75:257,79:161,80:163,81:164,82:165,83:166,84:169,85:170,86:173,87:174,88:175,89:$V21,90:$V31,91:$V41,92:$V51,93:$V61,97:$V71,103:$V81,104:$V91,105:$Va1,107:$Va,108:$Vb},{21:$Vl,22:$Vm,27:258,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{21:$Vl,22:$Vm,23:[1,259],24:260,27:155,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},o($VE,[2,23]),o($VE,[2,24]),{21:$Vl,22:$Vm,27:261,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},o($Vg1,[2,126]),{21:$Vl,22:$Vm,27:262,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},o($Vg1,[2,127]),o($Vg1,[2,128]),o($Vg1,[2,129],{30:$VF,32:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,56:$VV}),{2:$V01,7:162,9:167,13:176,14:177,15:178,16:179,17:180,18:181,21:$V11,25:168,29:171,31:172,33:183,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,76:[1,263],79:219,80:163,81:164,82:165,83:166,84:169,85:170,86:173,87:174,88:175,89:$V21,90:$V31,91:$V41,92:$V51,93:$V61,97:$V71,103:$V81,104:$V91,105:$Va1,107:$Va,108:$Vb},{21:[1,264]},{65:[1,265]},{26:$Ve1,76:[1,266]},o($Vc,[2,72]),{2:$V01,7:162,9:167,13:176,14:177,15:178,16:179,17:180,18:181,21:$V11,25:168,29:171,31:172,33:183,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,76:[1,267],79:219,80:163,81:164,82:165,83:166,84:169,85:170,86:173,87:174,88:175,89:$V21,90:$V31,91:$V41,92:$V51,93:$V61,97:$V71,103:$V81,104:$V91,105:$Va1,107:$Va,108:$Vb},o([2,10,21,23,26,35,36,37,38,39,40,56,57,66,76,89,90,91,92,93,97,101,102,103,104,105,107,108],[2,56],{30:$VF,32:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU}),{23:[1,268],30:$VF,32:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,56:$VV},o($Vj1,[2,132]),o($Vc,[2,17]),o($Vf1,[2,20],{30:$VF,32:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,56:$VV}),{40:[1,269]},{22:[1,270]},o($Vj1,[2,134]),{23:[1,271],30:$VF,32:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,56:$VV},{23:[1,272],30:$VF,32:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,56:$VV},{21:$Vl,22:$Vm,27:273,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{10:[1,274]},{21:[1,275]},{28:$Vd},{2:$V01,7:162,9:167,13:176,14:177,15:178,16:179,17:180,18:181,21:$V11,25:168,29:171,31:172,33:183,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,76:[1,276],79:219,80:163,81:164,82:165,83:166,84:169,85:170,86:173,87:174,88:175,89:$V21,90:$V31,91:$V41,92:$V51,93:$V61,97:$V71,103:$V81,104:$V91,105:$Va1,107:$Va,108:$Vb},{23:[1,277],30:$VF,32:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,56:$VV},{10:[1,278]},{23:[1,279],26:$Ve1},{23:[1,280],30:$VF,32:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,56:$VV},{23:[1,281],30:$VF,32:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,56:$VV},o($Vc,[2,75]),o($VY,[2,79]),{21:$Vl,22:$Vm,27:282,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{10:[1,283]},o($Vc,[2,73]),o($VW,[2,65]),{49:[1,284]},{21:$Vl,22:$Vm,27:285,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{10:[1,286]},{74:[1,287]},{10:[1,288],30:$VF,32:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,56:$VV},{21:$Vl,22:$Vm,27:289,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{10:$Vh,26:$Vi,28:$Vj,34:41},{90:[1,290]},{10:[1,291]},o($Vg1,[2,18]),{10:[1,292]},{74:[1,293]},{74:[1,294]},{30:$VF,32:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,56:$VV,66:[1,295]},o($Vj1,[2,131]),{33:296,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$VC},{23:[1,297],30:$VF,32:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,56:$VV},o($Vj1,[2,135]),{2:$V01,7:162,9:167,13:176,14:177,15:178,16:179,17:180,18:181,21:$V11,25:168,29:171,31:172,33:183,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,75:298,79:161,80:163,81:164,82:165,83:166,84:169,85:170,86:173,87:174,88:175,89:$V21,90:$V31,91:$V41,92:$V51,93:$V61,97:$V71,103:$V81,104:$V91,105:$Va1,107:$Va,108:$Vb},{9:301,21:$Vk1,29:299,31:300},{10:[1,303],30:$VF,32:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,56:$VV},{22:[1,304]},o($Vg1,[2,103]),o($Vg1,[2,19]),{2:$V01,7:162,9:167,13:176,14:177,15:178,16:179,17:180,18:181,21:$V11,25:168,29:171,31:172,33:183,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,75:305,79:161,80:163,81:164,82:165,83:166,84:169,85:170,86:173,87:174,88:175,89:$V21,90:$V31,91:$V41,92:$V51,93:$V61,97:$V71,103:$V81,104:$V91,105:$Va1,107:$Va,108:$Vb},{98:306,99:307,100:308,101:$Vl1,102:$Vm1},{10:[1,311]},{51:[1,312]},{10:[1,313]},{2:$V01,7:162,9:167,13:176,14:177,15:178,16:179,17:180,18:181,21:$V11,25:168,29:171,31:172,33:183,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,76:[1,314],79:219,80:163,81:164,82:165,83:166,84:169,85:170,86:173,87:174,88:175,89:$V21,90:$V31,91:$V41,92:$V51,93:$V61,97:$V71,103:$V81,104:$V91,105:$Va1,107:$Va,108:$Vb},{23:[1,315]},{23:[1,316]},{23:[1,317]},{28:$Vd,30:$Vh1,32:$Vi1},{9:320,21:$Vk1,29:318,31:319},{21:$Vl,22:$Vm,27:321,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{2:$V01,7:162,9:167,13:176,14:177,15:178,16:179,17:180,18:181,21:$V11,25:168,29:171,31:172,33:183,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,76:[1,322],79:219,80:163,81:164,82:165,83:166,84:169,85:170,86:173,87:174,88:175,89:$V21,90:$V31,91:$V41,92:$V51,93:$V61,97:$V71,103:$V81,104:$V91,105:$Va1,107:$Va,108:$Vb},{76:[1,324],99:323,100:325,101:$Vl1,102:$Vm1},{76:[1,326]},o($Vn1,[2,123]),{57:[1,327]},{21:$Vl,22:$Vm,27:328,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},o($Vj1,[2,130]),{10:[1,329]},o($Vj1,[2,136]),o($Vg1,[2,104]),{74:[1,330]},{74:[1,331]},{74:[1,332]},{23:[1,333]},{23:[1,334]},{23:[1,335]},{23:[1,336],30:$VF,32:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,56:$VV},o($Vg1,[2,112],{95:338,96:339,94:[1,337]}),{76:[1,340]},o($Vg1,[2,120]),o($Vn1,[2,122]),o($Vg1,[2,121]),{2:$V01,7:162,9:167,13:176,14:177,15:178,16:179,17:180,18:181,21:$V11,25:168,29:171,31:172,33:183,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,75:341,79:161,80:163,81:164,82:165,83:166,84:169,85:170,86:173,87:174,88:175,89:$V21,90:$V31,91:$V41,92:$V51,93:$V61,97:$V71,103:$V81,104:$V91,105:$Va1,107:$Va,108:$Vb},{30:$VF,32:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,56:$VV,57:[1,342]},o($Vj1,[2,133]),{2:$V01,7:162,9:167,13:176,14:177,15:178,16:179,17:180,18:181,21:$V11,25:168,29:171,31:172,33:183,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,75:343,79:161,80:163,81:164,82:165,83:166,84:169,85:170,86:173,87:174,88:175,89:$V21,90:$V31,91:$V41,92:$V51,93:$V61,97:$V71,103:$V81,104:$V91,105:$Va1,107:$Va,108:$Vb},{2:$V01,7:162,9:167,13:176,14:177,15:178,16:179,17:180,18:181,21:$V11,25:168,29:171,31:172,33:183,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,75:344,79:161,80:163,81:164,82:165,83:166,84:169,85:170,86:173,87:174,88:175,89:$V21,90:$V31,91:$V41,92:$V51,93:$V61,97:$V71,103:$V81,104:$V91,105:$Va1,107:$Va,108:$Vb},{2:$V01,7:162,9:167,13:176,14:177,15:178,16:179,17:180,18:181,21:$V11,25:168,29:171,31:172,33:183,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,75:345,79:161,80:163,81:164,82:165,83:166,84:169,85:170,86:173,87:174,88:175,89:$V21,90:$V31,91:$V41,92:$V51,93:$V61,97:$V71,103:$V81,104:$V91,105:$Va1,107:$Va,108:$Vb},{74:[1,346]},{74:[1,347]},{74:[1,348]},{10:[1,349]},{74:[1,350],93:$Vo1},o($Vg1,[2,114],{96:353,94:[1,352]}),o($Vp1,[2,117]),o($Vg1,[2,119]),{2:$V01,7:162,9:167,13:176,14:177,15:178,16:179,17:180,18:181,21:$V11,25:168,29:171,31:172,33:183,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,76:[2,125],79:219,80:163,81:164,82:165,83:166,84:169,85:170,86:173,87:174,88:175,89:$V21,90:$V31,91:$V41,92:$V51,93:$V61,97:$V71,103:$V81,104:$V91,105:$Va1,107:$Va,108:$Vb},{2:$V01,7:162,9:167,13:176,14:177,15:178,16:179,17:180,18:181,21:$V11,25:168,29:171,31:172,33:183,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,75:354,79:161,80:163,81:164,82:165,83:166,84:169,85:170,86:173,87:174,88:175,89:$V21,90:$V31,91:$V41,92:$V51,93:$V61,97:$V71,103:$V81,104:$V91,105:$Va1,107:$Va,108:$Vb},{2:$V01,7:162,9:167,13:176,14:177,15:178,16:179,17:180,18:181,21:$V11,25:168,29:171,31:172,33:183,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,76:[1,355],79:219,80:163,81:164,82:165,83:166,84:169,85:170,86:173,87:174,88:175,89:$V21,90:$V31,91:$V41,92:$V51,93:$V61,97:$V71,103:$V81,104:$V91,105:$Va1,107:$Va,108:$Vb},{2:$V01,7:162,9:167,13:176,14:177,15:178,16:179,17:180,18:181,21:$V11,25:168,29:171,31:172,33:183,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,76:[1,356],79:219,80:163,81:164,82:165,83:166,84:169,85:170,86:173,87:174,88:175,89:$V21,90:$V31,91:$V41,92:$V51,93:$V61,97:$V71,103:$V81,104:$V91,105:$Va1,107:$Va,108:$Vb},{2:$V01,7:162,9:167,13:176,14:177,15:178,16:179,17:180,18:181,21:$V11,25:168,29:171,31:172,33:183,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,76:[1,357],79:219,80:163,81:164,82:165,83:166,84:169,85:170,86:173,87:174,88:175,89:$V21,90:$V31,91:$V41,92:$V51,93:$V61,97:$V71,103:$V81,104:$V91,105:$Va1,107:$Va,108:$Vb},{2:$V01,7:162,9:167,13:176,14:177,15:178,16:179,17:180,18:181,21:$V11,25:168,29:171,31:172,33:183,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,75:358,79:161,80:163,81:164,82:165,83:166,84:169,85:170,86:173,87:174,88:175,89:$V21,90:$V31,91:$V41,92:$V51,93:$V61,97:$V71,103:$V81,104:$V91,105:$Va1,107:$Va,108:$Vb},{2:$V01,7:162,9:167,13:176,14:177,15:178,16:179,17:180,18:181,21:$V11,25:168,29:171,31:172,33:183,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,75:359,79:161,80:163,81:164,82:165,83:166,84:169,85:170,86:173,87:174,88:175,89:$V21,90:$V31,91:$V41,92:$V51,93:$V61,97:$V71,103:$V81,104:$V91,105:$Va1,107:$Va,108:$Vb},{2:$V01,7:162,9:167,13:176,14:177,15:178,16:179,17:180,18:181,21:$V11,25:168,29:171,31:172,33:183,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,75:360,79:161,80:163,81:164,82:165,83:166,84:169,85:170,86:173,87:174,88:175,89:$V21,90:$V31,91:$V41,92:$V51,93:$V61,97:$V71,103:$V81,104:$V91,105:$Va1,107:$Va,108:$Vb},o($Vg1,[2,111]),{2:$V01,7:162,9:167,13:176,14:177,15:178,16:179,17:180,18:181,21:$V11,25:168,29:171,31:172,33:183,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,75:361,79:161,80:163,81:164,82:165,83:166,84:169,85:170,86:173,87:174,88:175,89:$V21,90:$V31,91:$V41,92:$V51,93:$V61,97:$V71,103:$V81,104:$V91,105:$Va1,107:$Va,108:$Vb},{22:[1,362]},{74:[1,363],93:$Vo1},o($Vp1,[2,116]),o($Vn1,[2,124],{7:162,80:163,81:164,82:165,83:166,9:167,25:168,84:169,85:170,29:171,31:172,86:173,87:174,88:175,13:176,14:177,15:178,16:179,17:180,18:181,33:183,79:219,2:$V01,21:$V11,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,89:$V21,90:$V31,91:$V41,92:$V51,93:$V61,97:$V71,103:$V81,104:$V91,105:$Va1,107:$Va,108:$Vb}),o($Vg1,[2,105]),o($Vg1,[2,106]),o($Vg1,[2,109]),{2:$V01,7:162,9:167,13:176,14:177,15:178,16:179,17:180,18:181,21:$V11,25:168,29:171,31:172,33:183,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,76:[1,364],79:219,80:163,81:164,82:165,83:166,84:169,85:170,86:173,87:174,88:175,89:$V21,90:$V31,91:$V41,92:$V51,93:$V61,97:$V71,103:$V81,104:$V91,105:$Va1,107:$Va,108:$Vb},{2:$V01,7:162,9:167,13:176,14:177,15:178,16:179,17:180,18:181,21:$V11,25:168,29:171,31:172,33:183,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,76:[1,365],79:219,80:163,81:164,82:165,83:166,84:169,85:170,86:173,87:174,88:175,89:$V21,90:$V31,91:$V41,92:$V51,93:$V61,97:$V71,103:$V81,104:$V91,105:$Va1,107:$Va,108:$Vb},{2:$V01,7:162,9:167,13:176,14:177,15:178,16:179,17:180,18:181,21:$V11,25:168,29:171,31:172,33:183,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,76:[1,366],79:219,80:163,81:164,82:165,83:166,84:169,85:170,86:173,87:174,88:175,89:$V21,90:$V31,91:$V41,92:$V51,93:$V61,97:$V71,103:$V81,104:$V91,105:$Va1,107:$Va,108:$Vb},{2:$V01,7:162,9:167,13:176,14:177,15:178,16:179,17:180,18:181,21:$V11,25:168,29:171,31:172,33:183,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,76:[1,367],79:219,80:163,81:164,82:165,83:166,84:169,85:170,86:173,87:174,88:175,89:$V21,90:$V31,91:$V41,92:$V51,93:$V61,97:$V71,103:$V81,104:$V91,105:$Va1,107:$Va,108:$Vb},{21:$Vl,22:$Vm,27:368,42:$Vn,55:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB},{2:$V01,7:162,9:167,13:176,14:177,15:178,16:179,17:180,18:181,21:$V11,25:168,29:171,31:172,33:183,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,75:369,79:161,80:163,81:164,82:165,83:166,84:169,85:170,86:173,87:174,88:175,89:$V21,90:$V31,91:$V41,92:$V51,93:$V61,97:$V71,103:$V81,104:$V91,105:$Va1,107:$Va,108:$Vb},o($Vg1,[2,107]),o($Vg1,[2,108]),o($Vg1,[2,110]),o($Vg1,[2,113]),{23:[1,370],30:$VF,32:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,56:$VV},{2:$V01,7:162,9:167,13:176,14:177,15:178,16:179,17:180,18:181,21:$V11,25:168,29:171,31:172,33:183,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,76:[1,371],79:219,80:163,81:164,82:165,83:166,84:169,85:170,86:173,87:174,88:175,89:$V21,90:$V31,91:$V41,92:$V51,93:$V61,97:$V71,103:$V81,104:$V91,105:$Va1,107:$Va,108:$Vb},{74:[1,372]},o($Vg1,[2,115]),{2:$V01,7:162,9:167,13:176,14:177,15:178,16:179,17:180,18:181,21:$V11,25:168,29:171,31:172,33:183,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,75:373,79:161,80:163,81:164,82:165,83:166,84:169,85:170,86:173,87:174,88:175,89:$V21,90:$V31,91:$V41,92:$V51,93:$V61,97:$V71,103:$V81,104:$V91,105:$Va1,107:$Va,108:$Vb},{2:$V01,7:162,9:167,13:176,14:177,15:178,16:179,17:180,18:181,21:$V11,25:168,29:171,31:172,33:183,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,76:[1,374],79:219,80:163,81:164,82:165,83:166,84:169,85:170,86:173,87:174,88:175,89:$V21,90:$V31,91:$V41,92:$V51,93:$V61,97:$V71,103:$V81,104:$V91,105:$Va1,107:$Va,108:$Vb},o($Vp1,[2,118])],
defaultActions: {28:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const TIPO_OPERACION	= require('./controller/Enums/TipoOperacion');
	const TIPO_VALOR 		= require('./controller/Enums/TipoValor');
	const TIPO_DATO			= require('./controller/Enums/TipoDato'); //para jalar el tipo de dato
	const INSTRUCCION	= require('./controller/Instruccion/Instruccion');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1://Comentario unilinea
break;
case 2://Comentario multilinea
break;
case 3:return 68
break;
case 4:return 'clase'
break;
case 5:return 35
break;
case 6:return 36
break;
case 7:return 37
break;
case 8:return 69
break;
case 9:return 70
break;
case 10:return 38
break;
case 11:return 39
break;
case 12:return 'cout'
break;
case 13:return 90
break;
case 14:return 91
break;
case 15:return 'exec'
break;
case 16:return 93
break;
case 17:return 103
break;
case 18:return 104
break;
case 19:return 105
break;
case 20:return 94
break;
case 21:return 97
break;
case 22:return 101
break;
case 23:return 102
break;
case 24:return 92
break;
case 25:return 73
break;
case 26:return 89
break;
case 27:return 59
break;
case 28:return 58
break;
case 29:return 19
break;
case 30:return 20
break;
case 31:return 60
break;
case 32:return 61
break;
case 33:return 62
break;
case 34:return 63
break;
case 35:return 64
break;
case 36:return 106
break;
case 37:return 40
break;
case 38:return 107
break;
case 39:return 67
break;
case 40:return 108
break;
case 41:return 109
break;
case 42:return 53
break;
case 43:return 54
break;
case 44:return 47
break;
case 45:return 28
break;
case 46:return 48
break;
case 47:return 50
break;
case 48:return 52
break;
case 49:return 51
break;
case 50:return 49
break;
case 51:return 26
break;
case 52:return 10
break;
case 53:return 74
break;
case 54:return 76
break;
case 55:return 43
break;
case 56:return 44
break;
case 57:return 32
break;
case 58:return 42
break;
case 59:return 30
break;
case 60:return 41
break;
case 61:return 45
break;
case 62:return 55
break;
case 63:return 46
break;
case 64:return 22
break;
case 65:return 23
break;
case 66:return 56
break;
case 67:return 57
break;
case 68:return 65
break;
case 69:return 66
break;
case 70:return 'PI'
break;
case 71:return 'E'
break;
case 72:return 21
break;
case 73:return 71
break;
case 74:return 72
break;
case 75:return 5;
break;
case 76:console.log('Error Lexico: '+yy_.yytext+' en la linea' + yy_.yylloc.first_line + ' en la columna '+yy_.yylloc.first_column); 
ErroresL =  new Array();
ErroresL.push("Lexico");
ErroresL.push(yy_.yytext);
ErroresL.push(yy_.yylloc.first_line);
ErroresL.push(yy_.yylloc.first_column);
TablaErrores.push(ErroresL);
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:clase\b)/,/^(?:double\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:int\b)/,/^(?:char\b)/,/^(?:cout\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:exec\b)/,/^(?:if\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:do\b)/,/^(?:void\b)/,/^(?:writeline\b)/,/^(?:tolower\b)/,/^(?:toupper\b)/,/^(?:start\b)/,/^(?:with\b)/,/^(?:length\b)/,/^(?:truncate\b)/,/^(?:round\b)/,/^(?:typeof\b)/,/^(?:tostring\b)/,/^(?:new\b)/,/^(?:dynamiclist\b)/,/^(?:append\b)/,/^(?:getvalue\b)/,/^(?:setvalue\b)/,/^(?:tochararray\b)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:>)/,/^(?:<)/,/^(?:,)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\*)/,/^(?:\/)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:\^)/,/^(?:!)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:\?)/,/^(?::)/,/^(?:\[)/,/^(?:\])/,/^(?:PI\b)/,/^(?:E\b)/,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/,/^(?:(["\""]((.)*?(\\")?)*?["\""])|((["\‚Äú"]|["\‚Äù"])((.)*?(\\")?)*?(["\‚Äù"]|["\‚Äú"])))/,/^(?:('(.)?'?')|('\\n')|('\\\\')|('\\"')|('\\t')|('\\r')|('\\u0000'))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}