/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,14],$V2=[1,15],$V3=[1,16],$V4=[1,17],$V5=[1,18],$V6=[1,19],$V7=[1,12],$V8=[5,8,16,31,32,33,34,35,65],$V9=[1,25],$Va=[1,48],$Vb=[1,35],$Vc=[1,34],$Vd=[1,36],$Ve=[1,37],$Vf=[1,38],$Vg=[1,39],$Vh=[1,40],$Vi=[1,41],$Vj=[1,42],$Vk=[1,43],$Vl=[1,44],$Vm=[1,45],$Vn=[1,46],$Vo=[1,47],$Vp=[1,49],$Vq=[5,8,16,18,31,32,33,34,35,37,50,53,54,55,56,57,58,59,60,61,62,63,64,65,77,78,79,80,81,85,89,90,91],$Vr=[14,19],$Vs=[1,74],$Vt=[1,75],$Vu=[1,60],$Vv=[1,61],$Vw=[1,62],$Vx=[1,63],$Vy=[1,64],$Vz=[1,65],$VA=[1,66],$VB=[1,67],$VC=[1,68],$VD=[1,69],$VE=[1,70],$VF=[1,71],$VG=[1,72],$VH=[1,73],$VI=[1,76],$VJ=[14,19,22,26,28,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52],$VK=[14,22,24],$VL=[19,22],$VM=[14,19,22,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52],$VN=[14,19,22,48,49,51,52],$VO=[1,140],$VP=[1,139],$VQ=[1,136],$VR=[1,137],$VS=[1,138],$VT=[1,141],$VU=[1,143],$VV=[1,142],$VW=[14,19,22,36,37,42,43,44,45,46,47,48,49,51,52],$VX=[14,19,22,36,37,38,39,41,42,43,44,45,46,47,48,49,51,52],$VY=[14,19,22,42,43,44,45,46,47,48,49,51,52],$VZ=[1,156],$V_=[5,8,31,32,33,34,35,77,78,79,80,81,85,89,90,91],$V$=[1,167],$V01=[1,168],$V11=[1,207],$V21=[1,215],$V31=[1,214],$V41=[8,89,90],$V51=[1,252],$V61=[5,8,31,32,33,34,35,77,78,79,80,81,82,85,89,90,91];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"clase":4,"identificador":5,"llaveA":6,"OPCIONESCUERPO":7,"llaveC":8,"EOF":9,"CUERPO":10,"DEC_VAR":11,"DEC_MET":12,"AS_VAR":13,"ptcoma":14,"EXEC":15,"start":16,"with":17,"parA":18,"parC":19,"LISTAVALORES":20,"LLAMADA_METODO":21,"coma":22,"EXPRESION":23,"igual":24,"INC_VAR":25,"incremento":26,"DECR_VAR":27,"decremento":28,"TIPO":29,"LISTADEC":30,"decimal":31,"cadena":32,"bandera":33,"intpr":34,"charpr":35,"suma":36,"menos":37,"multi":38,"div":39,"exponente":40,"modulo":41,"igualigual":42,"diferente":43,"menor":44,"menorigual":45,"mayor":46,"mayorigual":47,"or":48,"and":49,"not":50,"interrogacion":51,"dospuntos":52,"toupper":53,"tolower":54,"length":55,"truncate":56,"round":57,"typeof":58,"tostring":59,"NUMBER":60,"true":61,"false":62,"string":63,"caracter":64,"void":65,"OPCIONESMETODO":66,"LISTAPARAMETROS":67,"PARAMETROS":68,"CUERPOMETODO":69,"WHILE":70,"FOR":71,"DOWHILE":72,"IMPRIMIR":73,"IF":74,"BREAK":75,"SWITCH":76,"writeline":77,"while":78,"for":79,"do":80,"if":81,"else":82,"ELSEIF":83,"CONEIF":84,"switch":85,"CUERPOSWITCH":86,"DEFAULT":87,"CONSWITCH":88,"case":89,"default":90,"break":91,"$accept":0,"$end":1},
terminals_: {2:"error",4:"clase",5:"identificador",6:"llaveA",8:"llaveC",9:"EOF",14:"ptcoma",16:"start",17:"with",18:"parA",19:"parC",22:"coma",24:"igual",26:"incremento",28:"decremento",31:"decimal",32:"cadena",33:"bandera",34:"intpr",35:"charpr",36:"suma",37:"menos",38:"multi",39:"div",40:"exponente",41:"modulo",42:"igualigual",43:"diferente",44:"menor",45:"menorigual",46:"mayor",47:"mayorigual",48:"or",49:"and",50:"not",51:"interrogacion",52:"dospuntos",53:"toupper",54:"tolower",55:"length",56:"truncate",57:"round",58:"typeof",59:"tostring",60:"NUMBER",61:"true",62:"false",63:"string",64:"caracter",65:"void",77:"writeline",78:"while",79:"for",80:"do",81:"if",82:"else",85:"switch",89:"case",90:"default",91:"break"},
productions_: [0,[3,6],[7,2],[7,1],[10,1],[10,1],[10,2],[10,1],[15,6],[15,7],[21,4],[21,5],[20,3],[20,1],[13,3],[25,2],[27,2],[11,3],[11,5],[11,4],[11,6],[30,3],[30,2],[29,1],[29,1],[29,1],[29,1],[29,1],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,2],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,2],[23,2],[23,2],[23,5],[23,4],[23,4],[23,4],[23,4],[23,4],[23,4],[23,4],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[12,7],[12,8],[67,3],[67,1],[68,2],[66,2],[66,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,2],[69,1],[69,1],[69,1],[69,2],[69,2],[69,1],[73,5],[70,7],[71,10],[71,10],[71,11],[71,11],[71,10],[71,11],[72,9],[74,7],[74,11],[74,8],[74,12],[83,2],[83,1],[84,8],[76,8],[76,7],[76,7],[86,2],[86,1],[88,4],[87,3],[75,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-2];
break;
case 2: case 66: case 93: case 99:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 22: case 64: case 67: case 94: case 100:
this.$=[$$[$0]];
break;
case 4: case 5: case 7: case 68: case 69: case 70: case 71: case 72: case 74: case 75: case 76: case 79:
this.$=$$[$0]
break;
case 6: case 35: case 73: case 77: case 78:
this.$=$$[$0-1]
break;
case 8:
this.$ = INSTRUCCION.nuevoExec($$[$0-3], null, this._$.first_line,this._$.first_column+1)
break;
case 9:
this.$ = INSTRUCCION.nuevoExec($$[$0-4], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 10:
this.$ = INSTRUCCION.nuevaLlamada($$[$0-3], null, this._$.first_line,this._$.first_column+1)
break;
case 11:
this.$ = INSTRUCCION.nuevaLlamada($$[$0-4], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 12:
$$[$0-2].push($$[$0]); this.$=$$[$0-2]
break;
case 13:
this.$=[$$[$0]]
break;
case 14:
this.$ = INSTRUCCION.nuevaAsignacion($$[$0-2], $$[$0], this._$.first_line,this._$.first_column+1)
break;
case 15:
this.$= INSTRUCCION.nuevoIncremento($$[$0-1],this._$.first_line,this._$.first_column+1);
break;
case 16:
this.$= INSTRUCCION.nuevoDecremento($$[$0-1],this._$.first_line,this._$.first_column+1);
break;
case 17:
this.$ = INSTRUCCION.nuevaDeclaracion($$[$0-1], null, $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 18:
this.$ = INSTRUCCION.nuevaDeclaracion($$[$0-3], $$[$0-1], $$[$0-4], this._$.first_line,this._$.first_column+1)
break;
case 19:
var temp=$$[$0-2]; for(var i=0;i<$$[$0-1].length;i++){temp=temp + "," + $$[$0-1][i]}; this.$ = INSTRUCCION.nuevaDeclaracion(temp, null, $$[$0-3], this._$.first_line,this._$.first_column+1)
break;
case 20:
var temp=$$[$0-4]; for(var i=0;i<$$[$0-3].length;i++){temp=temp + "," + $$[$0-3][i]}; this.$ = INSTRUCCION.nuevaDeclaracion(temp, $$[$0-1], $$[$0-5], this._$.first_line,this._$.first_column+1)
break;
case 21: case 63:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 23:
this.$ = TIPO_DATO.DECIMAL
break;
case 24:
this.$ = TIPO_DATO.CADENA
break;
case 25:
this.$ = TIPO_DATO.BANDERA
break;
case 26:
this.$ = TIPO_DATO.ENTERO
break;
case 27:
this.$ = TIPO_DATO.CARACTER
break;
case 28:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.SUMA,this._$.first_line,this._$.first_column+1);
break;
case 29:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.RESTA,this._$.first_line,this._$.first_column+1);
break;
case 30:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MULTIPLICACION,this._$.first_line,this._$.first_column+1);
break;
case 31:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIVISION,this._$.first_line,this._$.first_column+1);
break;
case 32:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.POTENCIA,this._$.first_line,this._$.first_column+1);
break;
case 33:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MODULO,this._$.first_line,this._$.first_column+1);
break;
case 34:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0],$$[$0], TIPO_OPERACION.NEGACION,this._$.first_line,this._$.first_column+1);
break;
case 36:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.IGUALIGUAL,this._$.first_line,this._$.first_column+1);
break;
case 37:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIFERENTE,this._$.first_line,this._$.first_column+1);
break;
case 38:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENOR,this._$.first_line,this._$.first_column+1);
break;
case 39:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENORIGUAL,this._$.first_line,this._$.first_column+1);
break;
case 40:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYOR,this._$.first_line,this._$.first_column+1);
break;
case 41:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYORIGUAL,this._$.first_line,this._$.first_column+1);
break;
case 42:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.OR,this._$.first_line,this._$.first_column+1);
break;
case 43:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.AND,this._$.first_line,this._$.first_column+1);
break;
case 44:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0],$$[$0], TIPO_OPERACION.NOT,this._$.first_line,this._$.first_column+1);
break;
case 45:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.INC,this._$.first_line,this._$.first_column+1);
break;
case 46:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.DEC,this._$.first_line,this._$.first_column+1);
break;
case 47:
this.$= INSTRUCCION.nuevaOperacionTernaria($$[$0-4],$$[$0-2],$$[$0], TIPO_OPERACION.TERNARIO,this._$.first_line,this._$.first_column+1);
break;
case 48:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.TOUPPER,this._$.first_line,this._$.first_column+1);
break;
case 49:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.TOLOWER,this._$.first_line,this._$.first_column+1);
break;
case 50:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.LENGTH,this._$.first_line,this._$.first_column+1);
break;
case 51:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.TRUNCATE,this._$.first_line,this._$.first_column+1);
break;
case 52:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.ROUND,this._$.first_line,this._$.first_column+1);
break;
case 53:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.TYPEOF,this._$.first_line,this._$.first_column+1);
break;
case 54:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.TOSTRING,this._$.first_line,this._$.first_column+1);
break;
case 55:

           split1 = String($$[$0]).split(".");
           if(split1.length === 1){
              this.$ = INSTRUCCION.nuevoValor(Number($$[$0]), TIPO_VALOR.ENTERO, this._$.first_line,this._$.first_column+1)
            } else{
              this.$ = INSTRUCCION.nuevoValor(Number($$[$0]), TIPO_VALOR.DECIMAL, this._$.first_line,this._$.first_column+1)
            }
           
break;
case 56:
this.$ = INSTRUCCION.nuevoValor(($$[$0]), TIPO_VALOR.BANDERA, this._$.first_line,this._$.first_column+1)
break;
case 57:
this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.BANDERA, this._$.first_line,this._$.first_column+1)
break;
case 58:
this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.CADENA, this._$.first_line,this._$.first_column+1)
break;
case 59:
this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR, this._$.first_line,this._$.first_column+1)
break;
case 60:
this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.CARACTER, this._$.first_line,this._$.first_column+1)
break;
case 61:
this.$ = INSTRUCCION.nuevoMetodo($$[$0-5], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 62:
this.$ = INSTRUCCION.nuevoMetodo($$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 65:
this.$ = INSTRUCCION.nuevaDeclaracion($$[$0], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 80:
this.$ = new INSTRUCCION.nuevoCout($$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 81:
this.$ = new INSTRUCCION.nuevoWhile($$[$0-4], $$[$0-1] , this._$.first_line,this._$.first_column+1)
break;
case 82: case 83: case 86:
this.$ = new INSTRUCCION.nuevoFor($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 84: case 85: case 87:
this.$ = new INSTRUCCION.nuevoFor($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 88:
this.$ = new INSTRUCCION.nuevoDowhile($$[$0-6], $$[$0-2] , this._$.first_line,this._$.first_column+1)
break;
case 89:
this.$ = new INSTRUCCION.nuevoIf($$[$0-4], $$[$0-1] , this._$.first_line,this._$.first_column+1)
break;
case 90:
this.$ = new INSTRUCCION.nuevoIfElse($$[$0-8], $$[$0-5], $$[$0-1] , this._$.first_line,this._$.first_column+1)
break;
case 91:
this.$= new INSTRUCCION.nuevoIfConElseIf($$[$0-5], $$[$0-2], $$[$0], null, this._$.first_line,this._$.first_column+1)
break;
case 92:
this.$= new INSTRUCCION.nuevoIfConElseIf($$[$0-9], $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 95:
this.$ = new INSTRUCCION.nuevoElseIf($$[$0-4], $$[$0-1] , this._$.first_line,this._$.first_column+1) 
break;
case 96:
this.$= new INSTRUCCION.nuevoSwitch($$[$0-5], $$[$0-2], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 97:
this.$= new INSTRUCCION.nuevoSwitch($$[$0-4], $$[$0-1], null, this._$.first_line,this._$.first_column+1)
break;
case 98:
this.$= new INSTRUCCION.nuevoSwitch($$[$0-4], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 101:
this.$ = new INSTRUCCION.nuevoCase($$[$0-2], $$[$0] , this._$.first_line,this._$.first_column+1) 
break;
case 102:
this.$ = $$[$0]
break;
case 103:
this.$ = new INSTRUCCION.nuevoBreak(this._$.first_line,this._$.first_column+1)
break;
}
},
table: [{3:1,4:[1,2]},{1:[3]},{5:[1,3]},{6:[1,4]},{5:$V0,7:5,10:6,11:7,12:8,13:9,15:10,16:$V1,29:11,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,65:$V7},{5:$V0,8:[1,20],10:21,11:7,12:8,13:9,15:10,16:$V1,29:11,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,65:$V7},o($V8,[2,3]),o($V8,[2,4]),o($V8,[2,5]),{14:[1,22]},o($V8,[2,7]),{5:[1,23]},{5:[1,24]},{24:$V9},{17:[1,26]},{5:[2,23]},{5:[2,24]},{5:[2,25]},{5:[2,26]},{5:[2,27]},{9:[1,27]},o($V8,[2,2]),o($V8,[2,6]),{14:[1,28],22:[1,31],24:[1,29],30:30},{18:[1,32]},{5:$Va,18:$Vb,23:33,37:$Vc,50:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp},{5:[1,50]},{1:[2,1]},o($Vq,[2,17]),{5:$Va,18:$Vb,23:51,37:$Vc,50:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp},{14:[1,52],22:[1,54],24:[1,53]},{5:[1,55]},{19:[1,56],29:59,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,67:57,68:58},o($Vr,[2,14],{26:$Vs,28:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,51:$VI}),{5:$Va,18:$Vb,23:77,37:$Vc,50:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp},{5:$Va,18:$Vb,23:78,37:$Vc,50:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp},{5:$Va,18:$Vb,23:79,37:$Vc,50:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp},{18:[1,80]},{18:[1,81]},{18:[1,82]},{18:[1,83]},{18:[1,84]},{18:[1,85]},{18:[1,86]},o($VJ,[2,55]),o($VJ,[2,56]),o($VJ,[2,57]),o($VJ,[2,58]),o($VJ,[2,59]),o($VJ,[2,60]),{18:[1,87]},{14:[1,88],26:$Vs,28:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,51:$VI},o($Vq,[2,19]),{5:$Va,18:$Vb,23:89,37:$Vc,50:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp},{5:[1,90]},o($VK,[2,22]),{6:[1,91]},{19:[1,92],22:[1,93]},o($VL,[2,64]),{5:[1,94]},{5:$Va,18:$Vb,23:95,37:$Vc,50:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp},{5:$Va,18:$Vb,23:96,37:$Vc,50:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp},{5:$Va,18:$Vb,23:97,37:$Vc,50:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp},{5:$Va,18:$Vb,23:98,37:$Vc,50:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp},{5:$Va,18:$Vb,23:99,37:$Vc,50:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp},{5:$Va,18:$Vb,23:100,37:$Vc,50:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp},{5:$Va,18:$Vb,23:101,37:$Vc,50:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp},{5:$Va,18:$Vb,23:102,37:$Vc,50:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp},{5:$Va,18:$Vb,23:103,37:$Vc,50:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp},{5:$Va,18:$Vb,23:104,37:$Vc,50:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp},{5:$Va,18:$Vb,23:105,37:$Vc,50:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp},{5:$Va,18:$Vb,23:106,37:$Vc,50:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp},{5:$Va,18:$Vb,23:107,37:$Vc,50:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp},{5:$Va,18:$Vb,23:108,37:$Vc,50:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp},o($VJ,[2,45]),o($VJ,[2,46]),{5:$Va,18:$Vb,23:109,37:$Vc,50:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp},o($VM,[2,34],{26:$Vs,28:$Vt}),{19:[1,110],26:$Vs,28:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,51:$VI},o($VN,[2,44],{26:$Vs,28:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF}),{5:$Va,18:$Vb,23:111,37:$Vc,50:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp},{5:$Va,18:$Vb,23:112,37:$Vc,50:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp},{5:$Va,18:$Vb,23:113,37:$Vc,50:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp},{5:$Va,18:$Vb,23:114,37:$Vc,50:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp},{5:$Va,18:$Vb,23:115,37:$Vc,50:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp},{5:$Va,18:$Vb,23:116,37:$Vc,50:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp},{5:$Va,18:$Vb,23:117,37:$Vc,50:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp},{5:$Va,18:$Vb,19:[1,118],20:119,23:120,37:$Vc,50:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp},o($Vq,[2,18]),{14:[1,121],26:$Vs,28:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,51:$VI},o($VK,[2,21]),{5:$VO,11:124,13:129,21:130,25:133,27:134,29:11,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,66:122,69:123,70:125,71:126,72:127,73:128,74:131,75:132,76:135,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,85:$VU,91:$VV},{6:[1,144]},{29:59,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,68:145},o($VL,[2,65]),o($VW,[2,28],{26:$Vs,28:$Vt,38:$Vw,39:$Vx,40:$Vy,41:$Vz}),o($VW,[2,29],{26:$Vs,28:$Vt,38:$Vw,39:$Vx,40:$Vy,41:$Vz}),o($VX,[2,30],{26:$Vs,28:$Vt,40:$Vy}),o($VX,[2,31],{26:$Vs,28:$Vt,40:$Vy}),o($VM,[2,32],{26:$Vs,28:$Vt}),o($VX,[2,33],{26:$Vs,28:$Vt,40:$Vy}),o($VY,[2,36],{26:$Vs,28:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz}),o($VY,[2,37],{26:$Vs,28:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz}),o($VY,[2,38],{26:$Vs,28:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz}),o($VY,[2,39],{26:$Vs,28:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz}),o($VY,[2,40],{26:$Vs,28:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz}),o($VY,[2,41],{26:$Vs,28:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz}),o([14,19,22,48,51,52],[2,42],{26:$Vs,28:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,49:$VH}),o($VN,[2,43],{26:$Vs,28:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF}),{26:$Vs,28:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,51:$VI,52:[1,146]},o($VJ,[2,35]),{19:[1,147],26:$Vs,28:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,51:$VI},{19:[1,148],26:$Vs,28:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,51:$VI},{19:[1,149],26:$Vs,28:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,51:$VI},{19:[1,150],26:$Vs,28:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,51:$VI},{19:[1,151],26:$Vs,28:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,51:$VI},{19:[1,152],26:$Vs,28:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,51:$VI},{19:[1,153],26:$Vs,28:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,51:$VI},{14:[1,154]},{19:[1,155],22:$VZ},o($VL,[2,13],{26:$Vs,28:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,51:$VI}),o($Vq,[2,20]),{5:$VO,8:[1,157],11:124,13:129,21:130,25:133,27:134,29:11,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,69:158,70:125,71:126,72:127,73:128,74:131,75:132,76:135,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,85:$VU,91:$VV},o($V_,[2,67]),o($V_,[2,68]),o($V_,[2,69]),o($V_,[2,70]),o($V_,[2,71]),o($V_,[2,72]),{14:[1,159]},o($V_,[2,74]),o($V_,[2,75]),o($V_,[2,76]),{14:[1,160]},{14:[1,161]},o($V_,[2,79]),{18:[1,162]},{18:[1,163]},{6:[1,164]},{18:[1,165]},{18:[1,166],24:$V9,26:$V$,28:$V01},{18:[1,169]},{14:[1,170]},{18:[1,171]},{5:$VO,11:124,13:129,21:130,25:133,27:134,29:11,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,66:172,69:123,70:125,71:126,72:127,73:128,74:131,75:132,76:135,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,85:$VU,91:$VV},o($VL,[2,63]),{5:$Va,18:$Vb,23:173,37:$Vc,50:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp},o($VJ,[2,48]),o($VJ,[2,49]),o($VJ,[2,50]),o($VJ,[2,51]),o($VJ,[2,52]),o($VJ,[2,53]),o($VJ,[2,54]),o($V8,[2,8]),{14:[1,174]},{5:$Va,18:$Vb,23:175,37:$Vc,50:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp},o($V8,[2,61]),o($V_,[2,66]),o($V_,[2,73]),o($V_,[2,77]),o($V_,[2,78]),{5:$Va,18:$Vb,23:176,37:$Vc,50:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp},{5:$V0,11:177,13:178,29:11,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6},{5:$VO,11:124,13:129,21:130,25:133,27:134,29:11,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,66:179,69:123,70:125,71:126,72:127,73:128,74:131,75:132,76:135,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,85:$VU,91:$VV},{5:$Va,18:$Vb,23:180,37:$Vc,50:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp},{5:$Va,18:$Vb,19:[1,181],20:182,23:120,37:$Vc,50:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp},o($Vr,[2,15]),o($Vr,[2,16]),{5:$Va,18:$Vb,23:183,37:$Vc,50:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp},o($V_,[2,103]),{5:$Va,18:$Vb,23:184,37:$Vc,50:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp},{5:$VO,8:[1,185],11:124,13:129,21:130,25:133,27:134,29:11,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,69:158,70:125,71:126,72:127,73:128,74:131,75:132,76:135,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,85:$VU,91:$VV},o([14,19,22,51,52],[2,47],{26:$Vs,28:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH}),o($V8,[2,9]),o($VL,[2,12],{26:$Vs,28:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,51:$VI}),{19:[1,186],26:$Vs,28:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,51:$VI},{5:$Va,18:$Vb,23:187,37:$Vc,50:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp},{14:[1,188]},{5:$VO,8:[1,189],11:124,13:129,21:130,25:133,27:134,29:11,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,69:158,70:125,71:126,72:127,73:128,74:131,75:132,76:135,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,85:$VU,91:$VV},{19:[1,190],26:$Vs,28:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,51:$VI},{14:[1,191]},{19:[1,192],22:$VZ},{19:[1,193],26:$Vs,28:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,51:$VI},{19:[1,194],26:$Vs,28:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,51:$VI},o($V8,[2,62]),{6:[1,195]},{14:[1,196],26:$Vs,28:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,51:$VI},{5:$Va,18:$Vb,23:197,37:$Vc,50:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp},{78:[1,198]},{14:[1,199]},o($V_,[2,10]),{14:[1,200]},{6:[1,201]},{6:[1,202]},{5:$VO,11:124,13:129,21:130,25:133,27:134,29:11,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,66:203,69:123,70:125,71:126,72:127,73:128,74:131,75:132,76:135,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,85:$VU,91:$VV},{5:$V11,13:206,25:204,27:205},{14:[1,208],26:$Vs,28:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,51:$VI},{18:[1,209]},o($V_,[2,80]),o($V_,[2,11]),{5:$VO,11:124,13:129,21:130,25:133,27:134,29:11,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,66:210,69:123,70:125,71:126,72:127,73:128,74:131,75:132,76:135,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,85:$VU,91:$VV},{86:211,87:212,88:213,89:$V21,90:$V31},{5:$VO,8:[1,216],11:124,13:129,21:130,25:133,27:134,29:11,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,69:158,70:125,71:126,72:127,73:128,74:131,75:132,76:135,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,85:$VU,91:$VV},{19:[1,217]},{19:[1,218]},{19:[1,219]},{24:$V9,26:$V$,28:$V01},{5:$V11,13:222,25:220,27:221},{5:$Va,18:$Vb,23:223,37:$Vc,50:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp},{5:$VO,8:[1,224],11:124,13:129,21:130,25:133,27:134,29:11,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,69:158,70:125,71:126,72:127,73:128,74:131,75:132,76:135,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,85:$VU,91:$VV},{8:[1,226],87:225,88:227,89:$V21,90:$V31},{8:[1,228]},o($V41,[2,100]),{52:[1,229]},{5:$Va,18:$Vb,23:230,37:$Vc,50:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp},o($V_,[2,81]),{6:[1,231]},{6:[1,232]},{6:[1,233]},{19:[1,234]},{19:[1,235]},{19:[1,236]},{19:[1,237],26:$Vs,28:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,51:$VI},o($V_,[2,89],{83:239,84:240,82:[1,238]}),{8:[1,241]},o($V_,[2,97]),o($V41,[2,99]),o($V_,[2,98]),{5:$VO,11:124,13:129,21:130,25:133,27:134,29:11,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,66:242,69:123,70:125,71:126,72:127,73:128,74:131,75:132,76:135,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,85:$VU,91:$VV},{26:$Vs,28:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,51:$VI,52:[1,243]},{5:$VO,11:124,13:129,21:130,25:133,27:134,29:11,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,66:244,69:123,70:125,71:126,72:127,73:128,74:131,75:132,76:135,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,85:$VU,91:$VV},{5:$VO,11:124,13:129,21:130,25:133,27:134,29:11,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,66:245,69:123,70:125,71:126,72:127,73:128,74:131,75:132,76:135,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,85:$VU,91:$VV},{5:$VO,11:124,13:129,21:130,25:133,27:134,29:11,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,66:246,69:123,70:125,71:126,72:127,73:128,74:131,75:132,76:135,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,85:$VU,91:$VV},{6:[1,247]},{6:[1,248]},{6:[1,249]},{14:[1,250]},{6:[1,251],81:$V51},o($V_,[2,91],{84:254,82:[1,253]}),o($V61,[2,94]),o($V_,[2,96]),{5:$VO,8:[2,102],11:124,13:129,21:130,25:133,27:134,29:11,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,69:158,70:125,71:126,72:127,73:128,74:131,75:132,76:135,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,85:$VU,91:$VV},{5:$VO,11:124,13:129,21:130,25:133,27:134,29:11,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,66:255,69:123,70:125,71:126,72:127,73:128,74:131,75:132,76:135,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,85:$VU,91:$VV},{5:$VO,8:[1,256],11:124,13:129,21:130,25:133,27:134,29:11,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,69:158,70:125,71:126,72:127,73:128,74:131,75:132,76:135,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,85:$VU,91:$VV},{5:$VO,8:[1,257],11:124,13:129,21:130,25:133,27:134,29:11,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,69:158,70:125,71:126,72:127,73:128,74:131,75:132,76:135,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,85:$VU,91:$VV},{5:$VO,8:[1,258],11:124,13:129,21:130,25:133,27:134,29:11,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,69:158,70:125,71:126,72:127,73:128,74:131,75:132,76:135,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,85:$VU,91:$VV},{5:$VO,11:124,13:129,21:130,25:133,27:134,29:11,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,66:259,69:123,70:125,71:126,72:127,73:128,74:131,75:132,76:135,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,85:$VU,91:$VV},{5:$VO,11:124,13:129,21:130,25:133,27:134,29:11,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,66:260,69:123,70:125,71:126,72:127,73:128,74:131,75:132,76:135,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,85:$VU,91:$VV},{5:$VO,11:124,13:129,21:130,25:133,27:134,29:11,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,66:261,69:123,70:125,71:126,72:127,73:128,74:131,75:132,76:135,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,85:$VU,91:$VV},o($V_,[2,88]),{5:$VO,11:124,13:129,21:130,25:133,27:134,29:11,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,66:262,69:123,70:125,71:126,72:127,73:128,74:131,75:132,76:135,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,85:$VU,91:$VV},{18:[1,263]},{6:[1,264],81:$V51},o($V61,[2,93]),o($V41,[2,101],{29:11,11:124,70:125,71:126,72:127,73:128,13:129,21:130,74:131,75:132,25:133,27:134,76:135,69:158,5:$VO,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,85:$VU,91:$VV}),o($V_,[2,82]),o($V_,[2,83]),o($V_,[2,86]),{5:$VO,8:[1,265],11:124,13:129,21:130,25:133,27:134,29:11,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,69:158,70:125,71:126,72:127,73:128,74:131,75:132,76:135,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,85:$VU,91:$VV},{5:$VO,8:[1,266],11:124,13:129,21:130,25:133,27:134,29:11,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,69:158,70:125,71:126,72:127,73:128,74:131,75:132,76:135,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,85:$VU,91:$VV},{5:$VO,8:[1,267],11:124,13:129,21:130,25:133,27:134,29:11,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,69:158,70:125,71:126,72:127,73:128,74:131,75:132,76:135,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,85:$VU,91:$VV},{5:$VO,8:[1,268],11:124,13:129,21:130,25:133,27:134,29:11,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,69:158,70:125,71:126,72:127,73:128,74:131,75:132,76:135,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,85:$VU,91:$VV},{5:$Va,18:$Vb,23:269,37:$Vc,50:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp},{5:$VO,11:124,13:129,21:130,25:133,27:134,29:11,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,66:270,69:123,70:125,71:126,72:127,73:128,74:131,75:132,76:135,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,85:$VU,91:$VV},o($V_,[2,84]),o($V_,[2,85]),o($V_,[2,87]),o($V_,[2,90]),{19:[1,271],26:$Vs,28:$Vt,36:$Vu,37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,51:$VI},{5:$VO,8:[1,272],11:124,13:129,21:130,25:133,27:134,29:11,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,69:158,70:125,71:126,72:127,73:128,74:131,75:132,76:135,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,85:$VU,91:$VV},{6:[1,273]},o($V_,[2,92]),{5:$VO,11:124,13:129,21:130,25:133,27:134,29:11,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,66:274,69:123,70:125,71:126,72:127,73:128,74:131,75:132,76:135,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,85:$VU,91:$VV},{5:$VO,8:[1,275],11:124,13:129,21:130,25:133,27:134,29:11,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,69:158,70:125,71:126,72:127,73:128,74:131,75:132,76:135,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,85:$VU,91:$VV},o($V61,[2,95])],
defaultActions: {15:[2,23],16:[2,24],17:[2,25],18:[2,26],19:[2,27],27:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	const TIPO_OPERACION	= require('./controller/Enums/TipoOperacion');
	const TIPO_VALOR 		= require('./controller/Enums/TipoValor');
	const TIPO_DATO			= require('./controller/Enums/TipoDato'); //para jalar el tipo de dato
	const INSTRUCCION	= require('./controller/Instruccion/Instruccion');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1://Comentario unilinea
break;
case 2://Comentario multilinea
break;
case 3:return 60
break;
case 4:return 4
break;
case 5:return 31
break;
case 6:return 32
break;
case 7:return 33
break;
case 8:return 61
break;
case 9:return 62
break;
case 10:return 34
break;
case 11:return 35
break;
case 12:return 'cout'
break;
case 13:return 78
break;
case 14:return 79
break;
case 15:return 'exec'
break;
case 16:return 81
break;
case 17:return 91
break;
case 18:return 82
break;
case 19:return 85
break;
case 20:return 89
break;
case 21:return 90
break;
case 22:return 80
break;
case 23:return 65
break;
case 24:return 77
break;
case 25:return 54
break;
case 26:return 53
break;
case 27:return 16
break;
case 28:return 17
break;
case 29:return 55
break;
case 30:return 56
break;
case 31:return 57
break;
case 32:return 58
break;
case 33:return 59
break;
case 34:return 48
break;
case 35:return 49
break;
case 36:return 42
break;
case 37:return 24
break;
case 38:return 43
break;
case 39:return 45
break;
case 40:return 47
break;
case 41:return 46
break;
case 42:return 44
break;
case 43:return 22
break;
case 44:return 14
break;
case 45:return 6
break;
case 46:return 8
break;
case 47:return 38
break;
case 48:return 39
break;
case 49:return 28
break;
case 50:return 37
break;
case 51:return 26
break;
case 52:return 36
break;
case 53:return 40
break;
case 54:return 50
break;
case 55:return 41
break;
case 56:return 18
break;
case 57:return 19
break;
case 58:return 51
break;
case 59:return 52
break;
case 60:return 'PI'
break;
case 61:return 'E'
break;
case 62:return 5
break;
case 63:return 63
break;
case 64:return 64
break;
case 65:return 9;
break;
case 66:console.log('Error Lexico: '+yy_.yytext+' en la linea' + yy_.yylloc.first_line + ' en la columna '+yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:clase\b)/,/^(?:double\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:int\b)/,/^(?:char\b)/,/^(?:cout\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:exec\b)/,/^(?:if\b)/,/^(?:break\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:do\b)/,/^(?:void\b)/,/^(?:writeline\b)/,/^(?:tolower\b)/,/^(?:toupper\b)/,/^(?:start\b)/,/^(?:with\b)/,/^(?:length\b)/,/^(?:truncate\b)/,/^(?:round\b)/,/^(?:typeof\b)/,/^(?:tostring\b)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:>)/,/^(?:<)/,/^(?:,)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\*)/,/^(?:\/)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:\^)/,/^(?:!)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:\?)/,/^(?::)/,/^(?:PI\b)/,/^(?:E\b)/,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/,/^(?:(["\""]((.)*?(\\")?)*?["\""])|((["\“"]|["\”"])((.)*?(\\")?)*?(["\”"]|["\“"])))/,/^(?:('(.)?'?')|('\\n')|('\\\\')|('\\"')|('\\t')|('\\r')|('\\u0000'))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}