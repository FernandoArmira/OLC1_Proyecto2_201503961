/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,14],$V2=[1,15],$V3=[1,16],$V4=[1,17],$V5=[1,18],$V6=[1,19],$V7=[1,12],$V8=[5,8,16,30,31,32,33,34,57],$V9=[1,25],$Va=[1,41],$Vb=[1,35],$Vc=[1,34],$Vd=[1,36],$Ve=[1,37],$Vf=[1,38],$Vg=[1,39],$Vh=[1,40],$Vi=[1,42],$Vj=[5,8,16,17,30,31,32,33,34,36,49,52,53,54,55,56,57,69,70,71,72,73,77,81,82,83],$Vk=[14,18],$Vl=[1,67],$Vm=[1,68],$Vn=[1,53],$Vo=[1,54],$Vp=[1,55],$Vq=[1,56],$Vr=[1,57],$Vs=[1,58],$Vt=[1,59],$Vu=[1,60],$Vv=[1,61],$Vw=[1,62],$Vx=[1,63],$Vy=[1,64],$Vz=[1,65],$VA=[1,66],$VB=[1,69],$VC=[14,18,21,25,27,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51],$VD=[14,21,23],$VE=[18,21],$VF=[14,18,21,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51],$VG=[14,18,21,47,48,50,51],$VH=[1,101],$VI=[1,121],$VJ=[1,120],$VK=[1,117],$VL=[1,118],$VM=[1,119],$VN=[1,122],$VO=[1,124],$VP=[1,123],$VQ=[14,18,21,35,36,41,42,43,44,45,46,47,48,50,51],$VR=[14,18,21,35,36,37,38,40,41,42,43,44,45,46,47,48,50,51],$VS=[14,18,21,41,42,43,44,45,46,47,48,50,51],$VT=[5,8,30,31,32,33,34,69,70,71,72,73,77,81,82,83],$VU=[1,140],$VV=[1,141],$VW=[1,178],$VX=[1,186],$VY=[1,185],$VZ=[8,81,82],$V_=[1,223],$V$=[5,8,30,31,32,33,34,69,70,71,72,73,74,77,81,82,83];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"clase":4,"identificador":5,"llaveA":6,"OPCIONESCUERPO":7,"llaveC":8,"EOF":9,"CUERPO":10,"DEC_VAR":11,"DEC_MET":12,"AS_VAR":13,"ptcoma":14,"EXEC":15,"exec":16,"parA":17,"parC":18,"LISTAVALORES":19,"LLAMADA_METODO":20,"coma":21,"EXPRESION":22,"igual":23,"INC_VAR":24,"incremento":25,"DECR_VAR":26,"decremento":27,"TIPO":28,"LISTADEC":29,"decimal":30,"cadena":31,"bandera":32,"intpr":33,"charpr":34,"suma":35,"menos":36,"multi":37,"div":38,"exponente":39,"modulo":40,"igualigual":41,"diferente":42,"menor":43,"menorigual":44,"mayor":45,"mayorigual":46,"or":47,"and":48,"not":49,"interrogacion":50,"dospuntos":51,"NUMBER":52,"true":53,"false":54,"string":55,"caracter":56,"void":57,"OPCIONESMETODO":58,"LISTAPARAMETROS":59,"PARAMETROS":60,"CUERPOMETODO":61,"WHILE":62,"FOR":63,"DOWHILE":64,"IMPRIMIR":65,"IF":66,"BREAK":67,"SWITCH":68,"cout":69,"while":70,"for":71,"do":72,"if":73,"else":74,"ELSEIF":75,"CONEIF":76,"switch":77,"CUERPOSWITCH":78,"DEFAULT":79,"CONSWITCH":80,"case":81,"default":82,"break":83,"$accept":0,"$end":1},
terminals_: {2:"error",4:"clase",5:"identificador",6:"llaveA",8:"llaveC",9:"EOF",14:"ptcoma",16:"exec",17:"parA",18:"parC",21:"coma",23:"igual",25:"incremento",27:"decremento",30:"decimal",31:"cadena",32:"bandera",33:"intpr",34:"charpr",35:"suma",36:"menos",37:"multi",38:"div",39:"exponente",40:"modulo",41:"igualigual",42:"diferente",43:"menor",44:"menorigual",45:"mayor",46:"mayorigual",47:"or",48:"and",49:"not",50:"interrogacion",51:"dospuntos",52:"NUMBER",53:"true",54:"false",55:"string",56:"caracter",57:"void",69:"cout",70:"while",71:"for",72:"do",73:"if",74:"else",77:"switch",81:"case",82:"default",83:"break"},
productions_: [0,[3,6],[7,2],[7,1],[10,1],[10,1],[10,2],[10,1],[15,5],[15,6],[20,4],[20,5],[19,3],[19,1],[13,3],[24,2],[26,2],[11,3],[11,5],[11,4],[11,6],[29,3],[29,2],[28,1],[28,1],[28,1],[28,1],[28,1],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,2],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,2],[22,2],[22,2],[22,5],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[12,7],[12,8],[59,3],[59,1],[60,2],[58,2],[58,1],[61,1],[61,1],[61,1],[61,1],[61,1],[61,2],[61,1],[61,1],[61,1],[61,2],[61,2],[61,1],[65,5],[62,7],[63,10],[63,10],[63,11],[63,11],[63,10],[63,11],[64,9],[66,7],[66,11],[66,8],[66,12],[75,2],[75,1],[76,8],[68,8],[68,7],[68,7],[78,2],[78,1],[80,4],[79,3],[67,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-2];
break;
case 2: case 59: case 86: case 92:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 22: case 57: case 60: case 87: case 93:
this.$=[$$[$0]];
break;
case 4: case 5: case 7: case 61: case 62: case 63: case 64: case 65: case 67: case 68: case 69: case 72:
this.$=$$[$0]
break;
case 6: case 35: case 66: case 70: case 71:
this.$=$$[$0-1]
break;
case 8:
this.$ = INSTRUCCION.nuevoExec($$[$0-3], null, this._$.first_line,this._$.first_column+1)
break;
case 9:
this.$ = INSTRUCCION.nuevoExec($$[$0-4], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 10:
this.$ = INSTRUCCION.nuevaLlamada($$[$0-3], null, this._$.first_line,this._$.first_column+1)
break;
case 11:
this.$ = INSTRUCCION.nuevaLlamada($$[$0-4], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 12:
$$[$0-2].push($$[$0]); this.$=$$[$0-2]
break;
case 13:
this.$=[$$[$0]]
break;
case 14:
this.$ = INSTRUCCION.nuevaAsignacion($$[$0-2], $$[$0], this._$.first_line,this._$.first_column+1)
break;
case 15:
this.$= INSTRUCCION.nuevoIncremento($$[$0-1],this._$.first_line,this._$.first_column+1);
break;
case 16:
this.$= INSTRUCCION.nuevoDecremento($$[$0-1],this._$.first_line,this._$.first_column+1);
break;
case 17:
this.$ = INSTRUCCION.nuevaDeclaracion($$[$0-1], null, $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 18:
this.$ = INSTRUCCION.nuevaDeclaracion($$[$0-3], $$[$0-1], $$[$0-4], this._$.first_line,this._$.first_column+1)
break;
case 19:
var temp=$$[$0-2]; for(var i=0;i<$$[$0-1].length;i++){temp=temp + "," + $$[$0-1][i]}; this.$ = INSTRUCCION.nuevaDeclaracion(temp, null, $$[$0-3], this._$.first_line,this._$.first_column+1)
break;
case 20:
var temp=$$[$0-4]; for(var i=0;i<$$[$0-3].length;i++){temp=temp + "," + $$[$0-3][i]}; this.$ = INSTRUCCION.nuevaDeclaracion(temp, $$[$0-1], $$[$0-5], this._$.first_line,this._$.first_column+1)
break;
case 21: case 56:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 23:
this.$ = TIPO_DATO.DECIMAL
break;
case 24:
this.$ = TIPO_DATO.CADENA
break;
case 25:
this.$ = TIPO_DATO.BANDERA
break;
case 26:
this.$ = TIPO_DATO.ENTERO
break;
case 27:
this.$ = TIPO_DATO.CARACTER
break;
case 28:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.SUMA,this._$.first_line,this._$.first_column+1);
break;
case 29:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.RESTA,this._$.first_line,this._$.first_column+1);
break;
case 30:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MULTIPLICACION,this._$.first_line,this._$.first_column+1);
break;
case 31:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIVISION,this._$.first_line,this._$.first_column+1);
break;
case 32:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.POTENCIA,this._$.first_line,this._$.first_column+1);
break;
case 33:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MODULO,this._$.first_line,this._$.first_column+1);
break;
case 34:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0],$$[$0], TIPO_OPERACION.NEGACION,this._$.first_line,this._$.first_column+1);
break;
case 36:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.IGUALIGUAL,this._$.first_line,this._$.first_column+1);
break;
case 37:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIFERENTE,this._$.first_line,this._$.first_column+1);
break;
case 38:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENOR,this._$.first_line,this._$.first_column+1);
break;
case 39:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENORIGUAL,this._$.first_line,this._$.first_column+1);
break;
case 40:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYOR,this._$.first_line,this._$.first_column+1);
break;
case 41:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYORIGUAL,this._$.first_line,this._$.first_column+1);
break;
case 42:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.OR,this._$.first_line,this._$.first_column+1);
break;
case 43:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.AND,this._$.first_line,this._$.first_column+1);
break;
case 44:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0],$$[$0], TIPO_OPERACION.NOT,this._$.first_line,this._$.first_column+1);
break;
case 45:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.INC,this._$.first_line,this._$.first_column+1);
break;
case 46:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.DEC,this._$.first_line,this._$.first_column+1);
break;
case 47:
this.$= INSTRUCCION.nuevaOperacionTernaria($$[$0-4],$$[$0-2],$$[$0], TIPO_OPERACION.TERNARIO,this._$.first_line,this._$.first_column+1);
break;
case 48:

           split1 = String($$[$0]).split(".");
           if(split1.length === 1){
              this.$ = INSTRUCCION.nuevoValor(Number($$[$0]), TIPO_VALOR.ENTERO, this._$.first_line,this._$.first_column+1)
            } else{
              this.$ = INSTRUCCION.nuevoValor(Number($$[$0]), TIPO_VALOR.DECIMAL, this._$.first_line,this._$.first_column+1)
            }
           
break;
case 49:
this.$ = INSTRUCCION.nuevoValor(($$[$0]), TIPO_VALOR.BANDERA, this._$.first_line,this._$.first_column+1)
break;
case 50:
this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.BANDERA, this._$.first_line,this._$.first_column+1)
break;
case 51:
this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.CADENA, this._$.first_line,this._$.first_column+1)
break;
case 52:
this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR, this._$.first_line,this._$.first_column+1)
break;
case 53:
this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.CARACTER, this._$.first_line,this._$.first_column+1)
break;
case 54:
this.$ = INSTRUCCION.nuevoMetodo($$[$0-5], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 55:
this.$ = INSTRUCCION.nuevoMetodo($$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 58:
this.$ = INSTRUCCION.nuevaDeclaracion($$[$0], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 73:
this.$ = new INSTRUCCION.nuevoCout($$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 74:
this.$ = new INSTRUCCION.nuevoWhile($$[$0-4], $$[$0-1] , this._$.first_line,this._$.first_column+1)
break;
case 75: case 76: case 79:
this.$ = new INSTRUCCION.nuevoFor($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 77: case 78: case 80:
this.$ = new INSTRUCCION.nuevoFor($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 81:
this.$ = new INSTRUCCION.nuevoDowhile($$[$0-6], $$[$0-2] , this._$.first_line,this._$.first_column+1)
break;
case 82:
this.$ = new INSTRUCCION.nuevoIf($$[$0-4], $$[$0-1] , this._$.first_line,this._$.first_column+1)
break;
case 83:
this.$ = new INSTRUCCION.nuevoIfElse($$[$0-8], $$[$0-5], $$[$0-1] , this._$.first_line,this._$.first_column+1)
break;
case 84:
this.$= new INSTRUCCION.nuevoIfConElseIf($$[$0-5], $$[$0-2], $$[$0], null, this._$.first_line,this._$.first_column+1)
break;
case 85:
this.$= new INSTRUCCION.nuevoIfConElseIf($$[$0-9], $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 88:
this.$ = new INSTRUCCION.nuevoElseIf($$[$0-4], $$[$0-1] , this._$.first_line,this._$.first_column+1) 
break;
case 89:
this.$= new INSTRUCCION.nuevoSwitch($$[$0-5], $$[$0-2], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 90:
this.$= new INSTRUCCION.nuevoSwitch($$[$0-4], $$[$0-1], null, this._$.first_line,this._$.first_column+1)
break;
case 91:
this.$= new INSTRUCCION.nuevoSwitch($$[$0-4], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 94:
this.$ = new INSTRUCCION.nuevoCase($$[$0-2], $$[$0] , this._$.first_line,this._$.first_column+1) 
break;
case 95:
this.$ = $$[$0]
break;
case 96:
this.$ = new INSTRUCCION.nuevoBreak(this._$.first_line,this._$.first_column+1)
break;
}
},
table: [{3:1,4:[1,2]},{1:[3]},{5:[1,3]},{6:[1,4]},{5:$V0,7:5,10:6,11:7,12:8,13:9,15:10,16:$V1,28:11,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,57:$V7},{5:$V0,8:[1,20],10:21,11:7,12:8,13:9,15:10,16:$V1,28:11,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,57:$V7},o($V8,[2,3]),o($V8,[2,4]),o($V8,[2,5]),{14:[1,22]},o($V8,[2,7]),{5:[1,23]},{5:[1,24]},{23:$V9},{5:[1,26]},{5:[2,23]},{5:[2,24]},{5:[2,25]},{5:[2,26]},{5:[2,27]},{9:[1,27]},o($V8,[2,2]),o($V8,[2,6]),{14:[1,28],21:[1,31],23:[1,29],29:30},{17:[1,32]},{5:$Va,17:$Vb,22:33,36:$Vc,49:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{17:[1,43]},{1:[2,1]},o($Vj,[2,17]),{5:$Va,17:$Vb,22:44,36:$Vc,49:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{14:[1,45],21:[1,47],23:[1,46]},{5:[1,48]},{18:[1,49],28:52,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,59:50,60:51},o($Vk,[2,14],{25:$Vl,27:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,50:$VB}),{5:$Va,17:$Vb,22:70,36:$Vc,49:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{5:$Va,17:$Vb,22:71,36:$Vc,49:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{5:$Va,17:$Vb,22:72,36:$Vc,49:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},o($VC,[2,48]),o($VC,[2,49]),o($VC,[2,50]),o($VC,[2,51]),o($VC,[2,52]),o($VC,[2,53]),{5:$Va,17:$Vb,18:[1,73],19:74,22:75,36:$Vc,49:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{14:[1,76],25:$Vl,27:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,50:$VB},o($Vj,[2,19]),{5:$Va,17:$Vb,22:77,36:$Vc,49:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{5:[1,78]},o($VD,[2,22]),{6:[1,79]},{18:[1,80],21:[1,81]},o($VE,[2,57]),{5:[1,82]},{5:$Va,17:$Vb,22:83,36:$Vc,49:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{5:$Va,17:$Vb,22:84,36:$Vc,49:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{5:$Va,17:$Vb,22:85,36:$Vc,49:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{5:$Va,17:$Vb,22:86,36:$Vc,49:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{5:$Va,17:$Vb,22:87,36:$Vc,49:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{5:$Va,17:$Vb,22:88,36:$Vc,49:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{5:$Va,17:$Vb,22:89,36:$Vc,49:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{5:$Va,17:$Vb,22:90,36:$Vc,49:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{5:$Va,17:$Vb,22:91,36:$Vc,49:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{5:$Va,17:$Vb,22:92,36:$Vc,49:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{5:$Va,17:$Vb,22:93,36:$Vc,49:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{5:$Va,17:$Vb,22:94,36:$Vc,49:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{5:$Va,17:$Vb,22:95,36:$Vc,49:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{5:$Va,17:$Vb,22:96,36:$Vc,49:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},o($VC,[2,45]),o($VC,[2,46]),{5:$Va,17:$Vb,22:97,36:$Vc,49:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},o($VF,[2,34],{25:$Vl,27:$Vm}),{18:[1,98],25:$Vl,27:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,50:$VB},o($VG,[2,44],{25:$Vl,27:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy}),{14:[1,99]},{18:[1,100],21:$VH},o($VE,[2,13],{25:$Vl,27:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,50:$VB}),o($Vj,[2,18]),{14:[1,102],25:$Vl,27:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,50:$VB},o($VD,[2,21]),{5:$VI,11:105,13:110,20:111,24:114,26:115,28:11,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,58:103,61:104,62:106,63:107,64:108,65:109,66:112,67:113,68:116,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,77:$VO,83:$VP},{6:[1,125]},{28:52,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,60:126},o($VE,[2,58]),o($VQ,[2,28],{25:$Vl,27:$Vm,37:$Vp,38:$Vq,39:$Vr,40:$Vs}),o($VQ,[2,29],{25:$Vl,27:$Vm,37:$Vp,38:$Vq,39:$Vr,40:$Vs}),o($VR,[2,30],{25:$Vl,27:$Vm,39:$Vr}),o($VR,[2,31],{25:$Vl,27:$Vm,39:$Vr}),o($VF,[2,32],{25:$Vl,27:$Vm}),o($VR,[2,33],{25:$Vl,27:$Vm,39:$Vr}),o($VS,[2,36],{25:$Vl,27:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs}),o($VS,[2,37],{25:$Vl,27:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs}),o($VS,[2,38],{25:$Vl,27:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs}),o($VS,[2,39],{25:$Vl,27:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs}),o($VS,[2,40],{25:$Vl,27:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs}),o($VS,[2,41],{25:$Vl,27:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs}),o([14,18,21,47,50,51],[2,42],{25:$Vl,27:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,48:$VA}),o($VG,[2,43],{25:$Vl,27:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy}),{25:$Vl,27:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,50:$VB,51:[1,127]},o($VC,[2,35]),o($V8,[2,8]),{14:[1,128]},{5:$Va,17:$Vb,22:129,36:$Vc,49:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},o($Vj,[2,20]),{5:$VI,8:[1,130],11:105,13:110,20:111,24:114,26:115,28:11,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:131,62:106,63:107,64:108,65:109,66:112,67:113,68:116,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,77:$VO,83:$VP},o($VT,[2,60]),o($VT,[2,61]),o($VT,[2,62]),o($VT,[2,63]),o($VT,[2,64]),o($VT,[2,65]),{14:[1,132]},o($VT,[2,67]),o($VT,[2,68]),o($VT,[2,69]),{14:[1,133]},{14:[1,134]},o($VT,[2,72]),{17:[1,135]},{17:[1,136]},{6:[1,137]},{43:[1,138]},{17:[1,139],23:$V9,25:$VU,27:$VV},{17:[1,142]},{14:[1,143]},{17:[1,144]},{5:$VI,11:105,13:110,20:111,24:114,26:115,28:11,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,58:145,61:104,62:106,63:107,64:108,65:109,66:112,67:113,68:116,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,77:$VO,83:$VP},o($VE,[2,56]),{5:$Va,17:$Vb,22:146,36:$Vc,49:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},o($V8,[2,9]),o($VE,[2,12],{25:$Vl,27:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,50:$VB}),o($V8,[2,54]),o($VT,[2,59]),o($VT,[2,66]),o($VT,[2,70]),o($VT,[2,71]),{5:$Va,17:$Vb,22:147,36:$Vc,49:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{5:$V0,11:148,13:149,28:11,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6},{5:$VI,11:105,13:110,20:111,24:114,26:115,28:11,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,58:150,61:104,62:106,63:107,64:108,65:109,66:112,67:113,68:116,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,77:$VO,83:$VP},{43:[1,151]},{5:$Va,17:$Vb,18:[1,152],19:153,22:75,36:$Vc,49:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},o($Vk,[2,15]),o($Vk,[2,16]),{5:$Va,17:$Vb,22:154,36:$Vc,49:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},o($VT,[2,96]),{5:$Va,17:$Vb,22:155,36:$Vc,49:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{5:$VI,8:[1,156],11:105,13:110,20:111,24:114,26:115,28:11,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:131,62:106,63:107,64:108,65:109,66:112,67:113,68:116,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,77:$VO,83:$VP},o([14,18,21,50,51],[2,47],{25:$Vl,27:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA}),{18:[1,157],25:$Vl,27:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,50:$VB},{5:$Va,17:$Vb,22:158,36:$Vc,49:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{14:[1,159]},{5:$VI,8:[1,160],11:105,13:110,20:111,24:114,26:115,28:11,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:131,62:106,63:107,64:108,65:109,66:112,67:113,68:116,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,77:$VO,83:$VP},{5:$Va,17:$Vb,22:161,36:$Vc,49:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{14:[1,162]},{18:[1,163],21:$VH},{18:[1,164],25:$Vl,27:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,50:$VB},{18:[1,165],25:$Vl,27:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,50:$VB},o($V8,[2,55]),{6:[1,166]},{14:[1,167],25:$Vl,27:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,50:$VB},{5:$Va,17:$Vb,22:168,36:$Vc,49:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{70:[1,169]},{14:[1,170],25:$Vl,27:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,50:$VB},o($VT,[2,10]),{14:[1,171]},{6:[1,172]},{6:[1,173]},{5:$VI,11:105,13:110,20:111,24:114,26:115,28:11,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,58:174,61:104,62:106,63:107,64:108,65:109,66:112,67:113,68:116,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,77:$VO,83:$VP},{5:$VW,13:177,24:175,26:176},{14:[1,179],25:$Vl,27:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,50:$VB},{17:[1,180]},o($VT,[2,73]),o($VT,[2,11]),{5:$VI,11:105,13:110,20:111,24:114,26:115,28:11,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,58:181,61:104,62:106,63:107,64:108,65:109,66:112,67:113,68:116,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,77:$VO,83:$VP},{78:182,79:183,80:184,81:$VX,82:$VY},{5:$VI,8:[1,187],11:105,13:110,20:111,24:114,26:115,28:11,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:131,62:106,63:107,64:108,65:109,66:112,67:113,68:116,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,77:$VO,83:$VP},{18:[1,188]},{18:[1,189]},{18:[1,190]},{23:$V9,25:$VU,27:$VV},{5:$VW,13:193,24:191,26:192},{5:$Va,17:$Vb,22:194,36:$Vc,49:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{5:$VI,8:[1,195],11:105,13:110,20:111,24:114,26:115,28:11,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:131,62:106,63:107,64:108,65:109,66:112,67:113,68:116,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,77:$VO,83:$VP},{8:[1,197],79:196,80:198,81:$VX,82:$VY},{8:[1,199]},o($VZ,[2,93]),{51:[1,200]},{5:$Va,17:$Vb,22:201,36:$Vc,49:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},o($VT,[2,74]),{6:[1,202]},{6:[1,203]},{6:[1,204]},{18:[1,205]},{18:[1,206]},{18:[1,207]},{18:[1,208],25:$Vl,27:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,50:$VB},o($VT,[2,82],{75:210,76:211,74:[1,209]}),{8:[1,212]},o($VT,[2,90]),o($VZ,[2,92]),o($VT,[2,91]),{5:$VI,11:105,13:110,20:111,24:114,26:115,28:11,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,58:213,61:104,62:106,63:107,64:108,65:109,66:112,67:113,68:116,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,77:$VO,83:$VP},{25:$Vl,27:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,50:$VB,51:[1,214]},{5:$VI,11:105,13:110,20:111,24:114,26:115,28:11,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,58:215,61:104,62:106,63:107,64:108,65:109,66:112,67:113,68:116,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,77:$VO,83:$VP},{5:$VI,11:105,13:110,20:111,24:114,26:115,28:11,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,58:216,61:104,62:106,63:107,64:108,65:109,66:112,67:113,68:116,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,77:$VO,83:$VP},{5:$VI,11:105,13:110,20:111,24:114,26:115,28:11,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,58:217,61:104,62:106,63:107,64:108,65:109,66:112,67:113,68:116,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,77:$VO,83:$VP},{6:[1,218]},{6:[1,219]},{6:[1,220]},{14:[1,221]},{6:[1,222],73:$V_},o($VT,[2,84],{76:225,74:[1,224]}),o($V$,[2,87]),o($VT,[2,89]),{5:$VI,8:[2,95],11:105,13:110,20:111,24:114,26:115,28:11,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:131,62:106,63:107,64:108,65:109,66:112,67:113,68:116,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,77:$VO,83:$VP},{5:$VI,11:105,13:110,20:111,24:114,26:115,28:11,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,58:226,61:104,62:106,63:107,64:108,65:109,66:112,67:113,68:116,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,77:$VO,83:$VP},{5:$VI,8:[1,227],11:105,13:110,20:111,24:114,26:115,28:11,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:131,62:106,63:107,64:108,65:109,66:112,67:113,68:116,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,77:$VO,83:$VP},{5:$VI,8:[1,228],11:105,13:110,20:111,24:114,26:115,28:11,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:131,62:106,63:107,64:108,65:109,66:112,67:113,68:116,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,77:$VO,83:$VP},{5:$VI,8:[1,229],11:105,13:110,20:111,24:114,26:115,28:11,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:131,62:106,63:107,64:108,65:109,66:112,67:113,68:116,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,77:$VO,83:$VP},{5:$VI,11:105,13:110,20:111,24:114,26:115,28:11,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,58:230,61:104,62:106,63:107,64:108,65:109,66:112,67:113,68:116,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,77:$VO,83:$VP},{5:$VI,11:105,13:110,20:111,24:114,26:115,28:11,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,58:231,61:104,62:106,63:107,64:108,65:109,66:112,67:113,68:116,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,77:$VO,83:$VP},{5:$VI,11:105,13:110,20:111,24:114,26:115,28:11,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,58:232,61:104,62:106,63:107,64:108,65:109,66:112,67:113,68:116,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,77:$VO,83:$VP},o($VT,[2,81]),{5:$VI,11:105,13:110,20:111,24:114,26:115,28:11,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,58:233,61:104,62:106,63:107,64:108,65:109,66:112,67:113,68:116,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,77:$VO,83:$VP},{17:[1,234]},{6:[1,235],73:$V_},o($V$,[2,86]),o($VZ,[2,94],{28:11,11:105,62:106,63:107,64:108,65:109,13:110,20:111,66:112,67:113,24:114,26:115,68:116,61:131,5:$VI,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,77:$VO,83:$VP}),o($VT,[2,75]),o($VT,[2,76]),o($VT,[2,79]),{5:$VI,8:[1,236],11:105,13:110,20:111,24:114,26:115,28:11,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:131,62:106,63:107,64:108,65:109,66:112,67:113,68:116,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,77:$VO,83:$VP},{5:$VI,8:[1,237],11:105,13:110,20:111,24:114,26:115,28:11,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:131,62:106,63:107,64:108,65:109,66:112,67:113,68:116,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,77:$VO,83:$VP},{5:$VI,8:[1,238],11:105,13:110,20:111,24:114,26:115,28:11,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:131,62:106,63:107,64:108,65:109,66:112,67:113,68:116,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,77:$VO,83:$VP},{5:$VI,8:[1,239],11:105,13:110,20:111,24:114,26:115,28:11,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:131,62:106,63:107,64:108,65:109,66:112,67:113,68:116,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,77:$VO,83:$VP},{5:$Va,17:$Vb,22:240,36:$Vc,49:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{5:$VI,11:105,13:110,20:111,24:114,26:115,28:11,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,58:241,61:104,62:106,63:107,64:108,65:109,66:112,67:113,68:116,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,77:$VO,83:$VP},o($VT,[2,77]),o($VT,[2,78]),o($VT,[2,80]),o($VT,[2,83]),{18:[1,242],25:$Vl,27:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,50:$VB},{5:$VI,8:[1,243],11:105,13:110,20:111,24:114,26:115,28:11,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:131,62:106,63:107,64:108,65:109,66:112,67:113,68:116,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,77:$VO,83:$VP},{6:[1,244]},o($VT,[2,85]),{5:$VI,11:105,13:110,20:111,24:114,26:115,28:11,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,58:245,61:104,62:106,63:107,64:108,65:109,66:112,67:113,68:116,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,77:$VO,83:$VP},{5:$VI,8:[1,246],11:105,13:110,20:111,24:114,26:115,28:11,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:131,62:106,63:107,64:108,65:109,66:112,67:113,68:116,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,77:$VO,83:$VP},o($V$,[2,88])],
defaultActions: {15:[2,23],16:[2,24],17:[2,25],18:[2,26],19:[2,27],27:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	const TIPO_OPERACION	= require('./controller/Enums/TipoOperacion');
	const TIPO_VALOR 		= require('./controller/Enums/TipoValor');
	const TIPO_DATO			= require('./controller/Enums/TipoDato'); //para jalar el tipo de dato
	const INSTRUCCION	= require('./controller/Instruccion/Instruccion');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1://Comentario unilinea
break;
case 2://Comentario multilinea
break;
case 3:return 52
break;
case 4:return 4
break;
case 5:return 30
break;
case 6:return 31
break;
case 7:return 32
break;
case 8:return 53
break;
case 9:return 54
break;
case 10:return 33
break;
case 11:return 34
break;
case 12:return 69
break;
case 13:return 70
break;
case 14:return 71
break;
case 15:return 16
break;
case 16:return 73
break;
case 17:return 83
break;
case 18:return 74
break;
case 19:return 77
break;
case 20:return 81
break;
case 21:return 82
break;
case 22:return 72
break;
case 23:return 57
break;
case 24:return 47
break;
case 25:return 48
break;
case 26:return 41
break;
case 27:return 23
break;
case 28:return 42
break;
case 29:return 44
break;
case 30:return 46
break;
case 31:return 45
break;
case 32:return 43
break;
case 33:return 21
break;
case 34:return 14
break;
case 35:return 6
break;
case 36:return 8
break;
case 37:return 37
break;
case 38:return 38
break;
case 39:return 27
break;
case 40:return 36
break;
case 41:return 25
break;
case 42:return 35
break;
case 43:return 39
break;
case 44:return 49
break;
case 45:return 40
break;
case 46:return 17
break;
case 47:return 18
break;
case 48:return 50
break;
case 49:return 51
break;
case 50:return 'PI'
break;
case 51:return 'E'
break;
case 52:return 5
break;
case 53:return 55
break;
case 54:return 56
break;
case 55:return 9;
break;
case 56:console.log('Error Lexico: '+yy_.yytext+' en la linea' + yy_.yylloc.first_line + ' en la columna '+yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:clase\b)/,/^(?:double\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:int\b)/,/^(?:char\b)/,/^(?:cout\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:exec\b)/,/^(?:if\b)/,/^(?:break\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:do\b)/,/^(?:void\b)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:>)/,/^(?:<)/,/^(?:,)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\*)/,/^(?:\/)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:\^)/,/^(?:!)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:\?)/,/^(?::)/,/^(?:PI\b)/,/^(?:E\b)/,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/,/^(?:(["\""]((.)*?(\\")?)*?["\""])|((["\“"]|["\”"])((.)*?(\\")?)*?(["\”"]|["\“"])))/,/^(?:('(.)?'?')|('\\n')|('\\\\')|('\\"')|('\\t')|('\\r')|('\\u0000'))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}