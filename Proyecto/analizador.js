/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,18],$V2=[1,17],$V3=[1,22],$V4=[1,23],$V5=[1,24],$V6=[1,25],$V7=[1,26],$V8=[1,16],$V9=[1,19],$Va=[1,20],$Vb=[1,21],$Vc=[2,5,18,20,34,35,36,37,38,71,105,106,107],$Vd=[1,32],$Ve=[1,33],$Vf=[20,49,63],$Vg=[1,38],$Vh=[1,43],$Vi=[1,39],$Vj=[1,42],$Vk=[1,56],$Vl=[1,47],$Vm=[1,46],$Vn=[1,48],$Vo=[1,49],$Vp=[1,50],$Vq=[1,51],$Vr=[1,52],$Vs=[1,53],$Vt=[1,54],$Vu=[1,55],$Vv=[1,57],$Vw=[1,58],$Vx=[1,59],$Vy=[1,60],$Vz=[1,61],$VA=[1,62],$VB=[2,5,18,20,21,34,35,36,37,38,40,53,56,57,58,59,60,61,62,65,66,67,68,69,70,71,74,87,88,89,90,91,95,99,100,101,102,103,105,106,107],$VC=[10,22],$VD=[1,94],$VE=[1,95],$VF=[1,80],$VG=[1,81],$VH=[1,82],$VI=[1,83],$VJ=[1,84],$VK=[1,85],$VL=[1,86],$VM=[1,87],$VN=[1,88],$VO=[1,89],$VP=[1,90],$VQ=[1,91],$VR=[1,92],$VS=[1,93],$VT=[1,96],$VU=[2,10,20,22,25,29,31,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,64,74,87,88,89,90,91,95,99,100,101,102,103,105,106,107],$VV=[1,119],$VW=[22,25],$VX=[10,25,27],$VY=[2,10,20,22,25,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,64,74,87,88,89,90,91,95,99,100,101,102,103,105,106,107],$VZ=[2,10,20,22,25,34,35,36,37,38,51,52,54,55,64,74,87,88,89,90,91,95,99,100,101,102,103,105,106,107],$V_=[1,178],$V$=[1,184],$V01=[1,183],$V11=[1,180],$V21=[1,181],$V31=[1,182],$V41=[1,185],$V51=[1,187],$V61=[1,186],$V71=[1,188],$V81=[1,189],$V91=[2,10,20,22,25,34,35,36,37,38,39,40,45,46,47,48,49,50,51,52,54,55,64,74,87,88,89,90,91,95,99,100,101,102,103,105,106,107],$Va1=[2,10,20,22,25,34,35,36,37,38,39,40,41,42,44,45,46,47,48,49,50,51,52,54,55,64,74,87,88,89,90,91,95,99,100,101,102,103,105,106,107],$Vb1=[2,10,20,22,25,34,35,36,37,38,45,46,47,48,49,50,51,52,54,55,64,74,87,88,89,90,91,95,99,100,101,102,103,105,106,107],$Vc1=[1,209],$Vd1=[22,25,74],$Ve1=[2,20,34,35,36,37,38,74,87,88,89,90,91,95,99,100,101,102,103,105,106,107],$Vf1=[1,224],$Vg1=[1,225],$Vh1=[2,5,18,20,34,35,36,37,38,71,74,87,88,89,90,91,95,99,100,101,102,103,105,106,107],$Vi1=[1,291],$Vj1=[1,299],$Vk1=[1,298],$Vl1=[74,99,100],$Vm1=[1,339],$Vn1=[2,20,34,35,36,37,38,74,87,88,89,90,91,92,95,99,100,101,102,103,105,106,107];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"OPCIONESCUERPO":4,"EOF":5,"CUERPO":6,"DEC_VAR":7,"DEC_MET":8,"AS_VAR":9,"ptcoma":10,"EXEC":11,"DEC_FUN":12,"DEC_VEC":13,"AS_VEC":14,"DEC_LISTA":15,"ADD_LISTA":16,"UPD_LISTA":17,"start":18,"with":19,"identificador":20,"parA":21,"parC":22,"LISTAVALORES":23,"LLAMADA_METODO":24,"coma":25,"EXPRESION":26,"igual":27,"INC_VAR":28,"incremento":29,"DECR_VAR":30,"decremento":31,"TIPO":32,"LISTADEC":33,"decimal":34,"cadena":35,"bandera":36,"intpr":37,"charpr":38,"suma":39,"menos":40,"multi":41,"div":42,"exponente":43,"modulo":44,"igualigual":45,"diferente":46,"menor":47,"menorigual":48,"mayor":49,"mayorigual":50,"or":51,"and":52,"not":53,"interrogacion":54,"dospuntos":55,"toupper":56,"tolower":57,"length":58,"truncate":59,"round":60,"typeof":61,"tostring":62,"corA":63,"corC":64,"getvalue":65,"NUMBER":66,"true":67,"false":68,"string":69,"caracter":70,"void":71,"llaveA":72,"OPCIONESMETODO":73,"llaveC":74,"LISTAPARAMETROS":75,"PARAMETROS":76,"CUERPOMETODO":77,"WHILE":78,"FOR":79,"DOWHILE":80,"IMPRIMIR":81,"IF":82,"BREAK":83,"SWITCH":84,"CONTINUE":85,"RETURN":86,"writeline":87,"while":88,"for":89,"do":90,"if":91,"else":92,"ELSEIF":93,"CONEIF":94,"switch":95,"CUERPOSWITCH":96,"DEFAULT":97,"CONSWITCH":98,"case":99,"default":100,"break":101,"continue":102,"return":103,"nuevo":104,"dynamiclist":105,"append":106,"setvalue":107,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"ptcoma",18:"start",19:"with",20:"identificador",21:"parA",22:"parC",25:"coma",27:"igual",29:"incremento",31:"decremento",34:"decimal",35:"cadena",36:"bandera",37:"intpr",38:"charpr",39:"suma",40:"menos",41:"multi",42:"div",43:"exponente",44:"modulo",45:"igualigual",46:"diferente",47:"menor",48:"menorigual",49:"mayor",50:"mayorigual",51:"or",52:"and",53:"not",54:"interrogacion",55:"dospuntos",56:"toupper",57:"tolower",58:"length",59:"truncate",60:"round",61:"typeof",62:"tostring",63:"corA",64:"corC",65:"getvalue",66:"NUMBER",67:"true",68:"false",69:"string",70:"caracter",71:"void",72:"llaveA",74:"llaveC",87:"writeline",88:"while",89:"for",90:"do",91:"if",92:"else",95:"switch",99:"case",100:"default",101:"break",102:"continue",103:"return",104:"nuevo",105:"dynamiclist",106:"append",107:"setvalue"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[11,6],[11,7],[24,4],[24,5],[23,3],[23,1],[9,3],[28,2],[30,2],[7,3],[7,5],[7,4],[7,6],[33,3],[33,2],[32,1],[32,1],[32,1],[32,1],[32,1],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,2],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,2],[26,2],[26,2],[26,5],[26,4],[26,4],[26,4],[26,4],[26,4],[26,4],[26,4],[26,4],[26,6],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[8,7],[8,8],[12,7],[12,8],[75,3],[75,1],[76,2],[73,2],[73,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,2],[77,1],[77,1],[77,1],[77,2],[77,2],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[81,5],[78,7],[79,10],[79,10],[79,11],[79,11],[79,10],[79,11],[80,9],[82,7],[82,11],[82,8],[82,12],[93,2],[93,1],[94,8],[84,8],[84,7],[84,7],[96,2],[96,1],[98,4],[97,3],[83,2],[85,2],[86,2],[86,2],[13,11],[13,9],[14,7],[15,12],[16,7],[17,9]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 77: case 112: case 118:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 29: case 75: case 78: case 113: case 119:
this.$=[$$[$0]];
break;
case 4: case 5: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 79: case 80: case 81: case 82: case 83: case 85: case 86: case 87: case 90: case 91: case 92: case 93: case 94: case 95: case 96: case 97:
this.$=$$[$0]
break;
case 6: case 42: case 84: case 88: case 89:
this.$=$$[$0-1]
break;
case 14:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
      ErroresS =  new Array();
ErroresS.push("Sintactico");
ErroresS.push(yytext);
ErroresS.push(this._$.first_line);
ErroresS.push(this._$.first_column);
TablaErrores.push(ErroresS);
      
break;
case 15:
this.$ = INSTRUCCION.nuevoExec($$[$0-3], null, this._$.first_line,this._$.first_column+1)
break;
case 16:
this.$ = INSTRUCCION.nuevoExec($$[$0-4], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 17:
this.$ = INSTRUCCION.nuevaLlamada($$[$0-3], null, this._$.first_line,this._$.first_column+1)
break;
case 18:
this.$ = INSTRUCCION.nuevaLlamada($$[$0-4], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 19:
$$[$0-2].push($$[$0]); this.$=$$[$0-2]
break;
case 20:
this.$=[$$[$0]]
break;
case 21:
this.$ = INSTRUCCION.nuevaAsignacion($$[$0-2], $$[$0], this._$.first_line,this._$.first_column+1)
break;
case 22:
this.$= INSTRUCCION.nuevoIncremento($$[$0-1],this._$.first_line,this._$.first_column+1);
break;
case 23:
this.$= INSTRUCCION.nuevoDecremento($$[$0-1],this._$.first_line,this._$.first_column+1);
break;
case 24:
this.$ = INSTRUCCION.nuevaDeclaracion($$[$0-1], null, $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 25:
this.$ = INSTRUCCION.nuevaDeclaracion($$[$0-3], $$[$0-1], $$[$0-4], this._$.first_line,this._$.first_column+1)
break;
case 26:
var temp=$$[$0-2]; for(var i=0;i<$$[$0-1].length;i++){temp=temp + "," + $$[$0-1][i]}; this.$ = INSTRUCCION.nuevaDeclaracion(temp, null, $$[$0-3], this._$.first_line,this._$.first_column+1)
break;
case 27:
var temp=$$[$0-4]; for(var i=0;i<$$[$0-3].length;i++){temp=temp + "," + $$[$0-3][i]}; this.$ = INSTRUCCION.nuevaDeclaracion(temp, $$[$0-1], $$[$0-5], this._$.first_line,this._$.first_column+1)
break;
case 28: case 74:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 30:
this.$ = TIPO_DATO.DECIMAL
break;
case 31:
this.$ = TIPO_DATO.CADENA
break;
case 32:
this.$ = TIPO_DATO.BANDERA
break;
case 33:
this.$ = TIPO_DATO.ENTERO
break;
case 34:
this.$ = TIPO_DATO.CARACTER
break;
case 35:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.SUMA,this._$.first_line,this._$.first_column+1);
break;
case 36:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.RESTA,this._$.first_line,this._$.first_column+1);
break;
case 37:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MULTIPLICACION,this._$.first_line,this._$.first_column+1);
break;
case 38:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIVISION,this._$.first_line,this._$.first_column+1);
break;
case 39:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.POTENCIA,this._$.first_line,this._$.first_column+1);
break;
case 40:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MODULO,this._$.first_line,this._$.first_column+1);
break;
case 41:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0],$$[$0], TIPO_OPERACION.NEGACION,this._$.first_line,this._$.first_column+1);
break;
case 43:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.IGUALIGUAL,this._$.first_line,this._$.first_column+1);
break;
case 44:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIFERENTE,this._$.first_line,this._$.first_column+1);
break;
case 45:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENOR,this._$.first_line,this._$.first_column+1);
break;
case 46:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENORIGUAL,this._$.first_line,this._$.first_column+1);
break;
case 47:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYOR,this._$.first_line,this._$.first_column+1);
break;
case 48:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYORIGUAL,this._$.first_line,this._$.first_column+1);
break;
case 49:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.OR,this._$.first_line,this._$.first_column+1);
break;
case 50:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.AND,this._$.first_line,this._$.first_column+1);
break;
case 51:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0],$$[$0], TIPO_OPERACION.NOT,this._$.first_line,this._$.first_column+1);
break;
case 52:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.INC,this._$.first_line,this._$.first_column+1);
break;
case 53:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.DEC,this._$.first_line,this._$.first_column+1);
break;
case 54:
this.$= INSTRUCCION.nuevaOperacionTernaria($$[$0-4],$$[$0-2],$$[$0], TIPO_OPERACION.TERNARIO,this._$.first_line,this._$.first_column+1);
break;
case 55:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.TOUPPER,this._$.first_line,this._$.first_column+1);
break;
case 56:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.TOLOWER,this._$.first_line,this._$.first_column+1);
break;
case 57:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.LENGTH,this._$.first_line,this._$.first_column+1);
break;
case 58:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.TRUNCATE,this._$.first_line,this._$.first_column+1);
break;
case 59:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.ROUND,this._$.first_line,this._$.first_column+1);
break;
case 60:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.TYPEOF,this._$.first_line,this._$.first_column+1);
break;
case 61:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.TOSTRING,this._$.first_line,this._$.first_column+1);
break;
case 62:
this.$ = INSTRUCCION.nuevoValorVector($$[$0-3],$$[$0-1], TIPO_VALOR.VECTOR, this._$.first_line,this._$.first_column+1)
break;
case 63:
this.$ = INSTRUCCION.nuevoValorLista($$[$0-3],$$[$0-1], TIPO_VALOR.LISTA, this._$.first_line,this._$.first_column+1)
break;
case 64:

           split1 = String($$[$0]).split(".");
           if(split1.length === 1){
              this.$ = INSTRUCCION.nuevoValor(Number($$[$0]), TIPO_VALOR.ENTERO, this._$.first_line,this._$.first_column+1)
            } else{
              this.$ = INSTRUCCION.nuevoValor(Number($$[$0]), TIPO_VALOR.DECIMAL, this._$.first_line,this._$.first_column+1)
            }
           
break;
case 65:
this.$ = INSTRUCCION.nuevoValor(($$[$0]), TIPO_VALOR.BANDERA, this._$.first_line,this._$.first_column+1)
break;
case 66:
this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.BANDERA, this._$.first_line,this._$.first_column+1)
break;
case 67:
this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.CADENA, this._$.first_line,this._$.first_column+1)
break;
case 68:
this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR, this._$.first_line,this._$.first_column+1)
break;
case 69:
this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.CARACTER, this._$.first_line,this._$.first_column+1)
break;
case 70:
this.$ = INSTRUCCION.nuevoMetodo($$[$0-5], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 71:
this.$ = INSTRUCCION.nuevoMetodo($$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 72:
this.$ = INSTRUCCION.nuevaFuncion($$[$0-6], $$[$0-5], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 73:
this.$ = INSTRUCCION.nuevoMetodo($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 76:
this.$ = INSTRUCCION.nuevaDeclaracion($$[$0], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 98:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
ErroresS =  new Array();
ErroresS.push("Sintactico");
ErroresS.push(yytext);
ErroresS.push(this._$.first_line);
ErroresS.push(this._$.first_column);
TablaErrores.push(ErroresS);
break;
case 99:
this.$ = new INSTRUCCION.nuevoCout($$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 100:
this.$ = new INSTRUCCION.nuevoWhile($$[$0-4], $$[$0-1] , this._$.first_line,this._$.first_column+1)
break;
case 101: case 102: case 105:
this.$ = new INSTRUCCION.nuevoFor($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 103: case 104: case 106:
this.$ = new INSTRUCCION.nuevoFor($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 107:
this.$ = new INSTRUCCION.nuevoDowhile($$[$0-6], $$[$0-2] , this._$.first_line,this._$.first_column+1)
break;
case 108:
this.$ = new INSTRUCCION.nuevoIf($$[$0-4], $$[$0-1] , this._$.first_line,this._$.first_column+1)
break;
case 109:
this.$ = new INSTRUCCION.nuevoIfElse($$[$0-8], $$[$0-5], $$[$0-1] , this._$.first_line,this._$.first_column+1)
break;
case 110:
this.$= new INSTRUCCION.nuevoIfConElseIf($$[$0-5], $$[$0-2], $$[$0], null, this._$.first_line,this._$.first_column+1)
break;
case 111:
this.$= new INSTRUCCION.nuevoIfConElseIf($$[$0-9], $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 114:
this.$ = new INSTRUCCION.nuevoElseIf($$[$0-4], $$[$0-1] , this._$.first_line,this._$.first_column+1) 
break;
case 115:
this.$= new INSTRUCCION.nuevoSwitch($$[$0-5], $$[$0-2], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 116:
this.$= new INSTRUCCION.nuevoSwitch($$[$0-4], $$[$0-1], null, this._$.first_line,this._$.first_column+1)
break;
case 117:
this.$= new INSTRUCCION.nuevoSwitch($$[$0-4], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 120:
this.$ = new INSTRUCCION.nuevoCase($$[$0-2], $$[$0] , this._$.first_line,this._$.first_column+1) 
break;
case 121:
this.$ = $$[$0]
break;
case 122:
this.$ = new INSTRUCCION.nuevoBreak(this._$.first_line,this._$.first_column+1)
break;
case 123:
this.$ = new INSTRUCCION.nuevoContinue(this._$.first_line,this._$.first_column+1)
break;
case 124:
this.$ = new INSTRUCCION.nuevoReturn(this._$.first_line,this._$.first_column+1)
break;
case 126:
this.$ = INSTRUCCION.nuevaDeclaracionVector($$[$0-10],$$[$0-9],$$[$0-4],$$[$0-2],this._$.first_line,this._$.first_column+1)
break;
case 127:
this.$ = INSTRUCCION.nuevaDeclaracionVector($$[$0-8],$$[$0-7],null,$$[$0-2],this._$.first_line,this._$.first_column+1)
break;
case 128:
this.$ = INSTRUCCION.nuevaAsignacionVector($$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 129:
this.$ = INSTRUCCION.nuevaDeclaracionLista($$[$0-9],$$[$0-7],$$[$0-2],this._$.first_line,this._$.first_column+1)
break;
case 130:
this.$ = INSTRUCCION.nuevaAsignacionLista($$[$0-4], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 131:
this.$ = INSTRUCCION.nuevoUpdateLista($$[$0-6], $$[$0-4], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,20:$V2,32:15,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,71:$V8,105:$V9,106:$Va,107:$Vb},{1:[3]},{2:$V0,5:[1,27],6:28,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,20:$V2,32:15,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,71:$V8,105:$V9,106:$Va,107:$Vb},o($Vc,[2,3]),o($Vc,[2,4]),o($Vc,[2,5]),{10:[1,29]},o($Vc,[2,7]),o($Vc,[2,8]),o($Vc,[2,9]),o($Vc,[2,10]),o($Vc,[2,11]),o($Vc,[2,12]),o($Vc,[2,13]),o($Vc,[2,14]),{20:[1,30]},{20:[1,31]},{27:$Vd,63:$Ve},{19:[1,34]},{47:[1,35]},{21:[1,36]},{21:[1,37]},o($Vf,[2,30]),o($Vf,[2,31]),o($Vf,[2,32]),o($Vf,[2,33]),o($Vf,[2,34]),{1:[2,1]},o($Vc,[2,2]),o($Vc,[2,6]),{10:$Vg,21:[1,41],25:$Vh,27:$Vi,33:40,63:$Vj},{21:[1,44]},{20:$Vk,21:$Vl,26:45,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},{20:$Vk,21:$Vl,26:63,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},{20:[1,64]},{32:65,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7},{20:[1,66]},{20:[1,67]},o($VB,[2,24]),{20:$Vk,21:$Vl,26:68,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},{10:[1,69],25:[1,71],27:[1,70]},{22:[1,72],32:75,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,75:73,76:74},{64:[1,76]},{20:[1,77]},{22:[1,78],32:75,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,75:79,76:74},o($VC,[2,21],{29:$VD,31:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT}),{20:$Vk,21:$Vl,26:97,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},{20:$Vk,21:$Vl,26:98,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},{20:$Vk,21:$Vl,26:99,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},{21:[1,100]},{21:[1,101]},{21:[1,102]},{21:[1,103]},{21:[1,104]},{21:[1,105]},{21:[1,106]},o($VU,[2,68],{63:[1,107]}),{21:[1,108]},o($VU,[2,64]),o($VU,[2,65]),o($VU,[2,66]),o($VU,[2,67]),o($VU,[2,69]),{29:$VD,31:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT,64:[1,109]},{21:[1,110]},{49:[1,111]},{25:[1,112]},{25:[1,113]},{10:[1,114],29:$VD,31:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT},o($VB,[2,26]),{20:$Vk,21:$Vl,26:115,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},{20:[1,116]},{72:[1,117]},{22:[1,118],25:$VV},o($VW,[2,75]),{20:[1,120]},{27:[1,121]},o($VX,[2,29]),{72:[1,122]},{22:[1,123],25:$VV},{20:$Vk,21:$Vl,26:124,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},{20:$Vk,21:$Vl,26:125,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},{20:$Vk,21:$Vl,26:126,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},{20:$Vk,21:$Vl,26:127,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},{20:$Vk,21:$Vl,26:128,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},{20:$Vk,21:$Vl,26:129,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},{20:$Vk,21:$Vl,26:130,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},{20:$Vk,21:$Vl,26:131,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},{20:$Vk,21:$Vl,26:132,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},{20:$Vk,21:$Vl,26:133,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},{20:$Vk,21:$Vl,26:134,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},{20:$Vk,21:$Vl,26:135,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},{20:$Vk,21:$Vl,26:136,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},{20:$Vk,21:$Vl,26:137,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},o($VU,[2,52]),o($VU,[2,53]),{20:$Vk,21:$Vl,26:138,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},o($VY,[2,41],{29:$VD,31:$VE}),{22:[1,139],29:$VD,31:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT},o($VZ,[2,51],{29:$VD,31:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ}),{20:$Vk,21:$Vl,26:140,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},{20:$Vk,21:$Vl,26:141,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},{20:$Vk,21:$Vl,26:142,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},{20:$Vk,21:$Vl,26:143,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},{20:$Vk,21:$Vl,26:144,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},{20:$Vk,21:$Vl,26:145,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},{20:$Vk,21:$Vl,26:146,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},{20:$Vk,21:$Vl,26:147,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},{20:[1,148]},{27:[1,149]},{20:$Vk,21:$Vl,22:[1,150],23:151,26:152,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},{20:[1,153]},{20:$Vk,21:$Vl,26:154,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},{20:$Vk,21:$Vl,26:155,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},o($VB,[2,25]),{10:[1,156],29:$VD,31:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT},o($VX,[2,28]),{2:$V_,7:159,9:164,13:173,14:174,15:175,16:176,17:177,20:$V$,24:165,28:168,30:169,32:179,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,73:157,77:158,78:160,79:161,80:162,81:163,82:166,83:167,84:170,85:171,86:172,87:$V01,88:$V11,89:$V21,90:$V31,91:$V41,95:$V51,101:$V61,102:$V71,103:$V81,105:$V9,106:$Va,107:$Vb},{72:[1,190]},{32:75,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,76:191},o($VW,[2,76]),{72:[1,193],104:[1,192]},{2:$V_,7:159,9:164,13:173,14:174,15:175,16:176,17:177,20:$V$,24:165,28:168,30:169,32:179,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,73:194,77:158,78:160,79:161,80:162,81:163,82:166,83:167,84:170,85:171,86:172,87:$V01,88:$V11,89:$V21,90:$V31,91:$V41,95:$V51,101:$V61,102:$V71,103:$V81,105:$V9,106:$Va,107:$Vb},{72:[1,195]},o($V91,[2,35],{29:$VD,31:$VE,41:$VH,42:$VI,43:$VJ,44:$VK}),o($V91,[2,36],{29:$VD,31:$VE,41:$VH,42:$VI,43:$VJ,44:$VK}),o($Va1,[2,37],{29:$VD,31:$VE,43:$VJ}),o($Va1,[2,38],{29:$VD,31:$VE,43:$VJ}),o($VY,[2,39],{29:$VD,31:$VE}),o($Va1,[2,40],{29:$VD,31:$VE,43:$VJ}),o($Vb1,[2,43],{29:$VD,31:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK}),o($Vb1,[2,44],{29:$VD,31:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK}),o($Vb1,[2,45],{29:$VD,31:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK}),o($Vb1,[2,46],{29:$VD,31:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK}),o($Vb1,[2,47],{29:$VD,31:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK}),o($Vb1,[2,48],{29:$VD,31:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK}),o([2,10,20,22,25,34,35,36,37,38,51,54,55,64,74,87,88,89,90,91,95,99,100,101,102,103,105,106,107],[2,49],{29:$VD,31:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,52:$VS}),o($VZ,[2,50],{29:$VD,31:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ}),{29:$VD,31:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT,55:[1,196]},o($VU,[2,42]),{22:[1,197],29:$VD,31:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT},{22:[1,198],29:$VD,31:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT},{22:[1,199],29:$VD,31:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT},{22:[1,200],29:$VD,31:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT},{22:[1,201],29:$VD,31:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT},{22:[1,202],29:$VD,31:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT},{22:[1,203],29:$VD,31:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT},{29:$VD,31:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT,64:[1,204]},{25:[1,205]},{20:$Vk,21:$Vl,26:206,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},{10:[1,207]},{22:[1,208],25:$Vc1},o($Vd1,[2,20],{29:$VD,31:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT}),{27:[1,210]},{22:[1,211],29:$VD,31:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT},{25:[1,212],29:$VD,31:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT},o($VB,[2,27]),{2:$V_,7:159,9:164,13:173,14:174,15:175,16:176,17:177,20:$V$,24:165,28:168,30:169,32:179,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,74:[1,213],77:214,78:160,79:161,80:162,81:163,82:166,83:167,84:170,85:171,86:172,87:$V01,88:$V11,89:$V21,90:$V31,91:$V41,95:$V51,101:$V61,102:$V71,103:$V81,105:$V9,106:$Va,107:$Vb},o($Ve1,[2,78]),o($Ve1,[2,79]),o($Ve1,[2,80]),o($Ve1,[2,81]),o($Ve1,[2,82]),o($Ve1,[2,83]),{10:[1,215]},o($Ve1,[2,85]),o($Ve1,[2,86]),o($Ve1,[2,87]),{10:[1,216]},{10:[1,217]},o($Ve1,[2,90]),o($Ve1,[2,91]),o($Ve1,[2,92]),o($Ve1,[2,93]),o($Ve1,[2,94]),o($Ve1,[2,95]),o($Ve1,[2,96]),o($Ve1,[2,97]),o($Ve1,[2,98]),{20:[1,218]},{21:[1,219]},{21:[1,220]},{72:[1,221]},{21:[1,222]},{21:[1,223],27:$Vd,29:$Vf1,31:$Vg1,63:$Ve},{21:[1,226]},{10:[1,227]},{21:[1,228]},{10:[1,229]},{10:[1,230],20:$Vk,21:$Vl,26:231,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},{2:$V_,7:159,9:164,13:173,14:174,15:175,16:176,17:177,20:$V$,24:165,28:168,30:169,32:179,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,73:232,77:158,78:160,79:161,80:162,81:163,82:166,83:167,84:170,85:171,86:172,87:$V01,88:$V11,89:$V21,90:$V31,91:$V41,95:$V51,101:$V61,102:$V71,103:$V81,105:$V9,106:$Va,107:$Vb},o($VW,[2,74]),{32:233,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7},{20:$Vk,21:$Vl,23:234,26:152,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},{2:$V_,7:159,9:164,13:173,14:174,15:175,16:176,17:177,20:$V$,24:165,28:168,30:169,32:179,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,74:[1,235],77:214,78:160,79:161,80:162,81:163,82:166,83:167,84:170,85:171,86:172,87:$V01,88:$V11,89:$V21,90:$V31,91:$V41,95:$V51,101:$V61,102:$V71,103:$V81,105:$V9,106:$Va,107:$Vb},{2:$V_,7:159,9:164,13:173,14:174,15:175,16:176,17:177,20:$V$,24:165,28:168,30:169,32:179,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,73:236,77:158,78:160,79:161,80:162,81:163,82:166,83:167,84:170,85:171,86:172,87:$V01,88:$V11,89:$V21,90:$V31,91:$V41,95:$V51,101:$V61,102:$V71,103:$V81,105:$V9,106:$Va,107:$Vb},{20:$Vk,21:$Vl,26:237,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},o($VU,[2,55]),o($VU,[2,56]),o($VU,[2,57]),o($VU,[2,58]),o($VU,[2,59]),o($VU,[2,60]),o($VU,[2,61]),o($VU,[2,62]),{20:$Vk,21:$Vl,26:238,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},{10:[1,239],29:$VD,31:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT},o($Vc,[2,15]),{10:[1,240]},{20:$Vk,21:$Vl,26:241,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},{104:[1,242]},{10:[1,243]},{20:$Vk,21:$Vl,26:244,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},o($Vc,[2,72]),o($Ve1,[2,77]),o($Ve1,[2,84]),o($Ve1,[2,88]),o($Ve1,[2,89]),{10:$Vg,25:$Vh,27:$Vi,33:40,63:$Vj},{20:$Vk,21:$Vl,26:245,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},{7:246,9:247,20:[1,249],32:248,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7},{2:$V_,7:159,9:164,13:173,14:174,15:175,16:176,17:177,20:$V$,24:165,28:168,30:169,32:179,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,73:250,77:158,78:160,79:161,80:162,81:163,82:166,83:167,84:170,85:171,86:172,87:$V01,88:$V11,89:$V21,90:$V31,91:$V41,95:$V51,101:$V61,102:$V71,103:$V81,105:$V9,106:$Va,107:$Vb},{20:$Vk,21:$Vl,26:251,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},{20:$Vk,21:$Vl,22:[1,252],23:253,26:152,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},o($VC,[2,22]),o($VC,[2,23]),{20:$Vk,21:$Vl,26:254,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},o($Ve1,[2,122]),{20:$Vk,21:$Vl,26:255,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},o($Ve1,[2,123]),o($Ve1,[2,124]),o($Ve1,[2,125],{29:$VD,31:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT}),{2:$V_,7:159,9:164,13:173,14:174,15:175,16:176,17:177,20:$V$,24:165,28:168,30:169,32:179,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,74:[1,256],77:214,78:160,79:161,80:162,81:163,82:166,83:167,84:170,85:171,86:172,87:$V01,88:$V11,89:$V21,90:$V31,91:$V41,95:$V51,101:$V61,102:$V71,103:$V81,105:$V9,106:$Va,107:$Vb},{63:[1,257]},{25:$Vc1,74:[1,258]},o($Vc,[2,70]),{2:$V_,7:159,9:164,13:173,14:174,15:175,16:176,17:177,20:$V$,24:165,28:168,30:169,32:179,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,74:[1,259],77:214,78:160,79:161,80:162,81:163,82:166,83:167,84:170,85:171,86:172,87:$V01,88:$V11,89:$V21,90:$V31,91:$V41,95:$V51,101:$V61,102:$V71,103:$V81,105:$V9,106:$Va,107:$Vb},o([2,10,20,22,25,34,35,36,37,38,54,55,64,74,87,88,89,90,91,95,99,100,101,102,103,105,106,107],[2,54],{29:$VD,31:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS}),{22:[1,260],29:$VD,31:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT},o($Vh1,[2,128]),o($Vc,[2,16]),o($Vd1,[2,19],{29:$VD,31:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT}),{105:[1,261]},o($Vh1,[2,130]),{22:[1,262],29:$VD,31:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT},{22:[1,263],29:$VD,31:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT},{20:$Vk,21:$Vl,26:264,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},{10:[1,265]},{20:[1,266]},{27:$Vd},{2:$V_,7:159,9:164,13:173,14:174,15:175,16:176,17:177,20:$V$,24:165,28:168,30:169,32:179,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,74:[1,267],77:214,78:160,79:161,80:162,81:163,82:166,83:167,84:170,85:171,86:172,87:$V01,88:$V11,89:$V21,90:$V31,91:$V41,95:$V51,101:$V61,102:$V71,103:$V81,105:$V9,106:$Va,107:$Vb},{22:[1,268],29:$VD,31:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT},{10:[1,269]},{22:[1,270],25:$Vc1},{22:[1,271],29:$VD,31:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT},{22:[1,272],29:$VD,31:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT},o($Vc,[2,73]),{20:$Vk,21:$Vl,26:273,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},{10:[1,274]},o($Vc,[2,71]),o($VU,[2,63]),{47:[1,275]},{10:[1,276]},{72:[1,277]},{10:[1,278],29:$VD,31:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT},{20:$Vk,21:$Vl,26:279,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},{10:$Vg,25:$Vh,27:$Vi,33:40},{88:[1,280]},{10:[1,281]},o($Ve1,[2,17]),{10:[1,282]},{72:[1,283]},{72:[1,284]},{29:$VD,31:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT,64:[1,285]},o($Vh1,[2,127]),{32:286,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7},o($Vh1,[2,131]),{2:$V_,7:159,9:164,13:173,14:174,15:175,16:176,17:177,20:$V$,24:165,28:168,30:169,32:179,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,73:287,77:158,78:160,79:161,80:162,81:163,82:166,83:167,84:170,85:171,86:172,87:$V01,88:$V11,89:$V21,90:$V31,91:$V41,95:$V51,101:$V61,102:$V71,103:$V81,105:$V9,106:$Va,107:$Vb},{9:290,20:$Vi1,28:288,30:289},{10:[1,292],29:$VD,31:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT},{21:[1,293]},o($Ve1,[2,99]),o($Ve1,[2,18]),{2:$V_,7:159,9:164,13:173,14:174,15:175,16:176,17:177,20:$V$,24:165,28:168,30:169,32:179,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,73:294,77:158,78:160,79:161,80:162,81:163,82:166,83:167,84:170,85:171,86:172,87:$V01,88:$V11,89:$V21,90:$V31,91:$V41,95:$V51,101:$V61,102:$V71,103:$V81,105:$V9,106:$Va,107:$Vb},{96:295,97:296,98:297,99:$Vj1,100:$Vk1},{10:[1,300]},{49:[1,301]},{2:$V_,7:159,9:164,13:173,14:174,15:175,16:176,17:177,20:$V$,24:165,28:168,30:169,32:179,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,74:[1,302],77:214,78:160,79:161,80:162,81:163,82:166,83:167,84:170,85:171,86:172,87:$V01,88:$V11,89:$V21,90:$V31,91:$V41,95:$V51,101:$V61,102:$V71,103:$V81,105:$V9,106:$Va,107:$Vb},{22:[1,303]},{22:[1,304]},{22:[1,305]},{27:$Vd,29:$Vf1,31:$Vg1},{9:308,20:$Vi1,28:306,30:307},{20:$Vk,21:$Vl,26:309,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},{2:$V_,7:159,9:164,13:173,14:174,15:175,16:176,17:177,20:$V$,24:165,28:168,30:169,32:179,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,74:[1,310],77:214,78:160,79:161,80:162,81:163,82:166,83:167,84:170,85:171,86:172,87:$V01,88:$V11,89:$V21,90:$V31,91:$V41,95:$V51,101:$V61,102:$V71,103:$V81,105:$V9,106:$Va,107:$Vb},{74:[1,312],97:311,98:313,99:$Vj1,100:$Vk1},{74:[1,314]},o($Vl1,[2,119]),{55:[1,315]},{20:$Vk,21:$Vl,26:316,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},o($Vh1,[2,126]),{10:[1,317]},o($Ve1,[2,100]),{72:[1,318]},{72:[1,319]},{72:[1,320]},{22:[1,321]},{22:[1,322]},{22:[1,323]},{22:[1,324],29:$VD,31:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT},o($Ve1,[2,108],{93:326,94:327,92:[1,325]}),{74:[1,328]},o($Ve1,[2,116]),o($Vl1,[2,118]),o($Ve1,[2,117]),{2:$V_,7:159,9:164,13:173,14:174,15:175,16:176,17:177,20:$V$,24:165,28:168,30:169,32:179,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,73:329,77:158,78:160,79:161,80:162,81:163,82:166,83:167,84:170,85:171,86:172,87:$V01,88:$V11,89:$V21,90:$V31,91:$V41,95:$V51,101:$V61,102:$V71,103:$V81,105:$V9,106:$Va,107:$Vb},{29:$VD,31:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT,55:[1,330]},o($Vh1,[2,129]),{2:$V_,7:159,9:164,13:173,14:174,15:175,16:176,17:177,20:$V$,24:165,28:168,30:169,32:179,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,73:331,77:158,78:160,79:161,80:162,81:163,82:166,83:167,84:170,85:171,86:172,87:$V01,88:$V11,89:$V21,90:$V31,91:$V41,95:$V51,101:$V61,102:$V71,103:$V81,105:$V9,106:$Va,107:$Vb},{2:$V_,7:159,9:164,13:173,14:174,15:175,16:176,17:177,20:$V$,24:165,28:168,30:169,32:179,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,73:332,77:158,78:160,79:161,80:162,81:163,82:166,83:167,84:170,85:171,86:172,87:$V01,88:$V11,89:$V21,90:$V31,91:$V41,95:$V51,101:$V61,102:$V71,103:$V81,105:$V9,106:$Va,107:$Vb},{2:$V_,7:159,9:164,13:173,14:174,15:175,16:176,17:177,20:$V$,24:165,28:168,30:169,32:179,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,73:333,77:158,78:160,79:161,80:162,81:163,82:166,83:167,84:170,85:171,86:172,87:$V01,88:$V11,89:$V21,90:$V31,91:$V41,95:$V51,101:$V61,102:$V71,103:$V81,105:$V9,106:$Va,107:$Vb},{72:[1,334]},{72:[1,335]},{72:[1,336]},{10:[1,337]},{72:[1,338],91:$Vm1},o($Ve1,[2,110],{94:341,92:[1,340]}),o($Vn1,[2,113]),o($Ve1,[2,115]),{2:$V_,7:159,9:164,13:173,14:174,15:175,16:176,17:177,20:$V$,24:165,28:168,30:169,32:179,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,74:[2,121],77:214,78:160,79:161,80:162,81:163,82:166,83:167,84:170,85:171,86:172,87:$V01,88:$V11,89:$V21,90:$V31,91:$V41,95:$V51,101:$V61,102:$V71,103:$V81,105:$V9,106:$Va,107:$Vb},{2:$V_,7:159,9:164,13:173,14:174,15:175,16:176,17:177,20:$V$,24:165,28:168,30:169,32:179,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,73:342,77:158,78:160,79:161,80:162,81:163,82:166,83:167,84:170,85:171,86:172,87:$V01,88:$V11,89:$V21,90:$V31,91:$V41,95:$V51,101:$V61,102:$V71,103:$V81,105:$V9,106:$Va,107:$Vb},{2:$V_,7:159,9:164,13:173,14:174,15:175,16:176,17:177,20:$V$,24:165,28:168,30:169,32:179,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,74:[1,343],77:214,78:160,79:161,80:162,81:163,82:166,83:167,84:170,85:171,86:172,87:$V01,88:$V11,89:$V21,90:$V31,91:$V41,95:$V51,101:$V61,102:$V71,103:$V81,105:$V9,106:$Va,107:$Vb},{2:$V_,7:159,9:164,13:173,14:174,15:175,16:176,17:177,20:$V$,24:165,28:168,30:169,32:179,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,74:[1,344],77:214,78:160,79:161,80:162,81:163,82:166,83:167,84:170,85:171,86:172,87:$V01,88:$V11,89:$V21,90:$V31,91:$V41,95:$V51,101:$V61,102:$V71,103:$V81,105:$V9,106:$Va,107:$Vb},{2:$V_,7:159,9:164,13:173,14:174,15:175,16:176,17:177,20:$V$,24:165,28:168,30:169,32:179,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,74:[1,345],77:214,78:160,79:161,80:162,81:163,82:166,83:167,84:170,85:171,86:172,87:$V01,88:$V11,89:$V21,90:$V31,91:$V41,95:$V51,101:$V61,102:$V71,103:$V81,105:$V9,106:$Va,107:$Vb},{2:$V_,7:159,9:164,13:173,14:174,15:175,16:176,17:177,20:$V$,24:165,28:168,30:169,32:179,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,73:346,77:158,78:160,79:161,80:162,81:163,82:166,83:167,84:170,85:171,86:172,87:$V01,88:$V11,89:$V21,90:$V31,91:$V41,95:$V51,101:$V61,102:$V71,103:$V81,105:$V9,106:$Va,107:$Vb},{2:$V_,7:159,9:164,13:173,14:174,15:175,16:176,17:177,20:$V$,24:165,28:168,30:169,32:179,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,73:347,77:158,78:160,79:161,80:162,81:163,82:166,83:167,84:170,85:171,86:172,87:$V01,88:$V11,89:$V21,90:$V31,91:$V41,95:$V51,101:$V61,102:$V71,103:$V81,105:$V9,106:$Va,107:$Vb},{2:$V_,7:159,9:164,13:173,14:174,15:175,16:176,17:177,20:$V$,24:165,28:168,30:169,32:179,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,73:348,77:158,78:160,79:161,80:162,81:163,82:166,83:167,84:170,85:171,86:172,87:$V01,88:$V11,89:$V21,90:$V31,91:$V41,95:$V51,101:$V61,102:$V71,103:$V81,105:$V9,106:$Va,107:$Vb},o($Ve1,[2,107]),{2:$V_,7:159,9:164,13:173,14:174,15:175,16:176,17:177,20:$V$,24:165,28:168,30:169,32:179,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,73:349,77:158,78:160,79:161,80:162,81:163,82:166,83:167,84:170,85:171,86:172,87:$V01,88:$V11,89:$V21,90:$V31,91:$V41,95:$V51,101:$V61,102:$V71,103:$V81,105:$V9,106:$Va,107:$Vb},{21:[1,350]},{72:[1,351],91:$Vm1},o($Vn1,[2,112]),o($Vl1,[2,120],{7:159,78:160,79:161,80:162,81:163,9:164,24:165,82:166,83:167,28:168,30:169,84:170,85:171,86:172,13:173,14:174,15:175,16:176,17:177,32:179,77:214,2:$V_,20:$V$,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,87:$V01,88:$V11,89:$V21,90:$V31,91:$V41,95:$V51,101:$V61,102:$V71,103:$V81,105:$V9,106:$Va,107:$Vb}),o($Ve1,[2,101]),o($Ve1,[2,102]),o($Ve1,[2,105]),{2:$V_,7:159,9:164,13:173,14:174,15:175,16:176,17:177,20:$V$,24:165,28:168,30:169,32:179,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,74:[1,352],77:214,78:160,79:161,80:162,81:163,82:166,83:167,84:170,85:171,86:172,87:$V01,88:$V11,89:$V21,90:$V31,91:$V41,95:$V51,101:$V61,102:$V71,103:$V81,105:$V9,106:$Va,107:$Vb},{2:$V_,7:159,9:164,13:173,14:174,15:175,16:176,17:177,20:$V$,24:165,28:168,30:169,32:179,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,74:[1,353],77:214,78:160,79:161,80:162,81:163,82:166,83:167,84:170,85:171,86:172,87:$V01,88:$V11,89:$V21,90:$V31,91:$V41,95:$V51,101:$V61,102:$V71,103:$V81,105:$V9,106:$Va,107:$Vb},{2:$V_,7:159,9:164,13:173,14:174,15:175,16:176,17:177,20:$V$,24:165,28:168,30:169,32:179,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,74:[1,354],77:214,78:160,79:161,80:162,81:163,82:166,83:167,84:170,85:171,86:172,87:$V01,88:$V11,89:$V21,90:$V31,91:$V41,95:$V51,101:$V61,102:$V71,103:$V81,105:$V9,106:$Va,107:$Vb},{2:$V_,7:159,9:164,13:173,14:174,15:175,16:176,17:177,20:$V$,24:165,28:168,30:169,32:179,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,74:[1,355],77:214,78:160,79:161,80:162,81:163,82:166,83:167,84:170,85:171,86:172,87:$V01,88:$V11,89:$V21,90:$V31,91:$V41,95:$V51,101:$V61,102:$V71,103:$V81,105:$V9,106:$Va,107:$Vb},{20:$Vk,21:$Vl,26:356,40:$Vm,53:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA},{2:$V_,7:159,9:164,13:173,14:174,15:175,16:176,17:177,20:$V$,24:165,28:168,30:169,32:179,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,73:357,77:158,78:160,79:161,80:162,81:163,82:166,83:167,84:170,85:171,86:172,87:$V01,88:$V11,89:$V21,90:$V31,91:$V41,95:$V51,101:$V61,102:$V71,103:$V81,105:$V9,106:$Va,107:$Vb},o($Ve1,[2,103]),o($Ve1,[2,104]),o($Ve1,[2,106]),o($Ve1,[2,109]),{22:[1,358],29:$VD,31:$VE,39:$VF,40:$VG,41:$VH,42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT},{2:$V_,7:159,9:164,13:173,14:174,15:175,16:176,17:177,20:$V$,24:165,28:168,30:169,32:179,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,74:[1,359],77:214,78:160,79:161,80:162,81:163,82:166,83:167,84:170,85:171,86:172,87:$V01,88:$V11,89:$V21,90:$V31,91:$V41,95:$V51,101:$V61,102:$V71,103:$V81,105:$V9,106:$Va,107:$Vb},{72:[1,360]},o($Ve1,[2,111]),{2:$V_,7:159,9:164,13:173,14:174,15:175,16:176,17:177,20:$V$,24:165,28:168,30:169,32:179,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,73:361,77:158,78:160,79:161,80:162,81:163,82:166,83:167,84:170,85:171,86:172,87:$V01,88:$V11,89:$V21,90:$V31,91:$V41,95:$V51,101:$V61,102:$V71,103:$V81,105:$V9,106:$Va,107:$Vb},{2:$V_,7:159,9:164,13:173,14:174,15:175,16:176,17:177,20:$V$,24:165,28:168,30:169,32:179,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,74:[1,362],77:214,78:160,79:161,80:162,81:163,82:166,83:167,84:170,85:171,86:172,87:$V01,88:$V11,89:$V21,90:$V31,91:$V41,95:$V51,101:$V61,102:$V71,103:$V81,105:$V9,106:$Va,107:$Vb},o($Vn1,[2,114])],
defaultActions: {27:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const TIPO_OPERACION	= require('./controller/Enums/TipoOperacion');
	const TIPO_VALOR 		= require('./controller/Enums/TipoValor');
	const TIPO_DATO			= require('./controller/Enums/TipoDato'); //para jalar el tipo de dato
	const INSTRUCCION	= require('./controller/Instruccion/Instruccion');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1://Comentario unilinea
break;
case 2://Comentario multilinea
break;
case 3:return 66
break;
case 4:return 'clase'
break;
case 5:return 34
break;
case 6:return 35
break;
case 7:return 36
break;
case 8:return 67
break;
case 9:return 68
break;
case 10:return 37
break;
case 11:return 38
break;
case 12:return 'cout'
break;
case 13:return 88
break;
case 14:return 89
break;
case 15:return 'exec'
break;
case 16:return 91
break;
case 17:return 101
break;
case 18:return 102
break;
case 19:return 103
break;
case 20:return 92
break;
case 21:return 95
break;
case 22:return 99
break;
case 23:return 100
break;
case 24:return 90
break;
case 25:return 71
break;
case 26:return 87
break;
case 27:return 57
break;
case 28:return 56
break;
case 29:return 18
break;
case 30:return 19
break;
case 31:return 58
break;
case 32:return 59
break;
case 33:return 60
break;
case 34:return 61
break;
case 35:return 62
break;
case 36:return 104
break;
case 37:return 105
break;
case 38:return 106
break;
case 39:return 65
break;
case 40:return 107
break;
case 41:return 51
break;
case 42:return 52
break;
case 43:return 45
break;
case 44:return 27
break;
case 45:return 46
break;
case 46:return 48
break;
case 47:return 50
break;
case 48:return 49
break;
case 49:return 47
break;
case 50:return 25
break;
case 51:return 10
break;
case 52:return 72
break;
case 53:return 74
break;
case 54:return 41
break;
case 55:return 42
break;
case 56:return 31
break;
case 57:return 40
break;
case 58:return 29
break;
case 59:return 39
break;
case 60:return 43
break;
case 61:return 53
break;
case 62:return 44
break;
case 63:return 21
break;
case 64:return 22
break;
case 65:return 54
break;
case 66:return 55
break;
case 67:return 63
break;
case 68:return 64
break;
case 69:return 'PI'
break;
case 70:return 'E'
break;
case 71:return 20
break;
case 72:return 69
break;
case 73:return 70
break;
case 74:return 5;
break;
case 75:console.log('Error Lexico: '+yy_.yytext+' en la linea' + yy_.yylloc.first_line + ' en la columna '+yy_.yylloc.first_column); 
ErroresL =  new Array();
ErroresL.push("Lexico");
ErroresL.push(yy_.yytext);
ErroresL.push(yy_.yylloc.first_line);
ErroresL.push(yy_.yylloc.first_column);
TablaErrores.push(ErroresL);
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:clase\b)/,/^(?:double\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:int\b)/,/^(?:char\b)/,/^(?:cout\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:exec\b)/,/^(?:if\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:do\b)/,/^(?:void\b)/,/^(?:writeline\b)/,/^(?:tolower\b)/,/^(?:toupper\b)/,/^(?:start\b)/,/^(?:with\b)/,/^(?:length\b)/,/^(?:truncate\b)/,/^(?:round\b)/,/^(?:typeof\b)/,/^(?:tostring\b)/,/^(?:new\b)/,/^(?:dynamiclist\b)/,/^(?:append\b)/,/^(?:getvalue\b)/,/^(?:setvalue\b)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:>)/,/^(?:<)/,/^(?:,)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\*)/,/^(?:\/)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:\^)/,/^(?:!)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:\?)/,/^(?::)/,/^(?:\[)/,/^(?:\])/,/^(?:PI\b)/,/^(?:E\b)/,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/,/^(?:(["\""]((.)*?(\\")?)*?["\""])|((["\‚Äú"]|["\‚Äù"])((.)*?(\\")?)*?(["\‚Äù"]|["\‚Äú"])))/,/^(?:('(.)?'?')|('\\n')|('\\\\')|('\\"')|('\\t')|('\\r')|('\\u0000'))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}